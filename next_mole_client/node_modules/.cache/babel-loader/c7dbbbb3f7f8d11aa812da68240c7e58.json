{"ast":null,"code":"import _objectWithoutProperties from\"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _classCallCheck from\"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';//import Data from \"../gotData.json\";\nimport{Button,Container,Row,Col}from'react-bootstrap';import{withRouter}from'react-router-dom';import{ForceGraph3D}from'react-force-graph';import FoundDataInFile from'./FoundDataInFile';import gotData from'../gotData.json';//import { easeLinear } from 'd3';\n//var finalJson = { nodes: [], links: [] };\nvar finalJsonNetwork={nodes:[],links:[]};var removedLinksTmp=[];// save the connections that removed\nvar arrConnections=[];var arrKeysAndRadio=[];var dataFromLocal=[];var rawData=[];//const isImageUrl = require('is-image-url');\nvar isImage=require('is-image');var Graph=/*#__PURE__*/function(_Component){_inherits(Graph,_Component);var _super=_createSuper(Graph);function Graph(props){var _this;_classCallCheck(this,Graph);_this=_super.call(this,props);//let local = false;\n_this.postJsonToDB=function(file){// save nodes and links to DB\nvar nodesList=file.nodes.map(function(item){var image=item.image,index=item.index,vx=item.vx,vy=item.vy,vz=item.vz,x=item.x,y=item.y,z=item.z,color=item.color,__threeObj=item.__threeObj,withoutGraphParams=_objectWithoutProperties(item,[\"image\",\"index\",\"vx\",\"vy\",\"vz\",\"x\",\"y\",\"z\",\"color\",\"__threeObj\"]);//  remove all graph parameters like vx, vy.....\nvar str=JSON.stringify(withoutGraphParams);var strW=str.replace(/'/g,\"\").replace(/\"|{|}/g,\"\");var id=item.id;var idW=id.replace(/'/g,\"\");var singleNode={NodeNum:idW,NodeImageURL:item.nodeImage,NodeDescription:strW};return singleNode;});var nodesListAll=_this.state.allNodes.map(function(item){var image=item.image,index=item.index,vx=item.vx,vy=item.vy,vz=item.vz,x=item.x,y=item.y,z=item.z,color=item.color,__threeObj=item.__threeObj,withoutGraphParams=_objectWithoutProperties(item,[\"image\",\"index\",\"vx\",\"vy\",\"vz\",\"x\",\"y\",\"z\",\"color\",\"__threeObj\"]);//  remove all graph parameters like vx, vy.....\nvar str=JSON.stringify(withoutGraphParams);var strW=str.replace(/'/g,\"\").replace(/\"|{|}/g,\"\");var id=item.id;var idW=id.replace(/'/g,\"\");var singleNode={NodeNum:idW,NodeImageURL:item.nodeImage,NodeDescription:strW};return singleNode;});var linksList=file.links.map(function(item){var sour=item.source.id;var sourW=sour.replace(/'/g,\"\");var targ=item.target.id;var targW=targ.replace(/'/g,\"\");var singleLink={SourceNode:sourW,TargetNode:targW,ConnectionType:item.connectionType,ConnectionWeight:1};return singleLink;});console.log(linksList);console.log(_this.props.location.state.jsonDetails);var str=_this.props.location.state.jsonDetails.subject;console.log(str);var tableName=str.replace(/ /g,\"_\");console.log(tableName);fetch(_this.apiUrl+'nodes/'+tableName,{//POST nodes with links\nmethod:'POST',body:JSON.stringify(nodesList),//mode: 'no-cors',\nheaders:new Headers({'Content-type':'application/json; charset=UTF-8'})}).then(function(res){console.log('res=',res);return res.json();}).then(function(result){console.log(\"fetch POST= \",result);},function(error){console.log(\"err post=\",error);});fetch(_this.apiUrl+'nodesSaveAll/'+tableName,{//POST nodes with / without links\nmethod:'POST',body:JSON.stringify(nodesListAll),//mode: 'no-cors',\nheaders:new Headers({'Content-type':'application/json; charset=UTF-8'})}).then(function(res){console.log('res=',res);return res.json();}).then(function(result){console.log(\"fetch POST= \",result);},function(error){console.log(\"err post=\",error);});fetch(_this.apiUrl+'links/'+tableName,{//POST links\nmethod:'POST',body:JSON.stringify(linksList),headers:new Headers({'Content-type':'application/json; charset=UTF-8'})}).then(function(res){console.log('res=',res);return res.json();}).then(function(result){console.log(\"fetch POST= \",result);},function(error){console.log(\"err post=\",error);});};_this.RemoveAllConnections=function(btnState){console.log(btnState);removedLinksTmp=_this.state.removedLinks;console.log(finalJsonNetwork.links);if(btnState==='allUnchacked'){finalJsonNetwork.links.map(function(i){return removedLinksTmp.push(i);});finalJsonNetwork.links.splice(0);console.log('links remain: ',finalJsonNetwork.links);console.log('removed ',removedLinksTmp);arrConnections.map(function(o){o.isChecked=false;});}else{removedLinksTmp.map(function(i){return finalJsonNetwork.links.push(i);});removedLinksTmp.splice(0);console.log('links remain: ',finalJsonNetwork.links);console.log('removed ',removedLinksTmp);arrConnections.map(function(o){o.isChecked=true;});}_this.setState({connectionsAll:arrConnections,finalJson:finalJsonNetwork,removedLinks:removedLinksTmp});};_this.RemoveConnection=function(x){// add / remove connection type   \nremovedLinksTmp=_this.state.removedLinks;console.log(removedLinksTmp,finalJsonNetwork);if(!x.target.checked){//  if connection removed        \nvar pos=arrConnections.map(function(e){return e.name;}).indexOf(x.target.value);arrConnections[pos].isChecked=false;_this.setState({connectionsAll:arrConnections});remove();function remove(){for(var j in finalJsonNetwork.links){if(finalJsonNetwork.links[j].connectionType===x.target.value){removedLinksTmp.push(finalJsonNetwork.links[j]);finalJsonNetwork.links.splice(j,1);}}var count=0;for(var k in finalJsonNetwork.links){if(finalJsonNetwork.links[k].connectionType===x.target.value){count++;};if(count>0){remove();}}}}else{var _pos=arrConnections.map(function(e){return e.name;}).indexOf(x.target.value);arrConnections[_pos].isChecked=true;_this.setState({connectionsAll:arrConnections});funclear();function funclear(){for(var k in removedLinksTmp){if(removedLinksTmp[k].connectionType===x.target.value){finalJsonNetwork.links.push(removedLinksTmp[k]);removedLinksTmp.splice(k,1);}}var temp=0;for(var l in removedLinksTmp){if(removedLinksTmp[l].connectionType===x.target.value){temp++;};if(temp>0){funclear();}}}}console.log(\"removed: \",removedLinksTmp);console.log('finaljson: ',finalJsonNetwork);console.log(_this.state.connectionsAll);_this.setState({finalJson:finalJsonNetwork,removedLinks:removedLinksTmp});//this.forceUpdate();\n};_this.getKeys=function(rawArr){var totalObj=rawArr.length;// total amount of object in original array\nvar arrAllKeys=[];// all keys including duplicates\nObject.keys(rawArr).forEach(function(k){var values=Object.keys(rawArr[k]);values.map(function(i){arrAllKeys.push(i);});});var arrDistinctKeys=Array.from(new Set(arrAllKeys));// remove duplicates\nvar keysAndValues=_this.countKeyRatio(arrDistinctKeys,arrAllKeys,totalObj);// get ratio for key\nreturn keysAndValues;};_this.countKeyRatio=function(arrDistinct,arrAll,totalObjCount){var arrKeysAndRadio2=[];arrDistinct.map(function(i){var search=i;var countKey=arrAll.reduce(function(n,val){// counts total amount of key appearence in the array\nreturn n+(val===search);},0);var objValuesTmp=_this.addValues(i);var objValues=Array.from(new Set(objValuesTmp));// remove duplicates values\nvar keyRatio=parseFloat((objValues.length/totalObjCount).toFixed(3));var obj={k:i,v:objValues,amount:countKey,ratio:keyRatio};arrKeysAndRadio2.push(obj);});arrKeysAndRadio2.sort(function(a,b){//    sort keys by ratio\nreturn b.ratio-a.ratio;});return arrKeysAndRadio2;};_this.addValues=function(index){// get all values for key \nvar val=[];var arrTmp=rawData;for(var g in arrTmp){if(arrTmp[g][index]){//אם בכלל קיים שדה כזה\nvar type=typeof arrTmp[g][index];if(type==='object'){arrTmp[g][index].map(function(item){val.push(item);});}else{val.push(arrTmp[g][index]);}}}return val;};_this.getId=function(arrOfKeys){var isId=false;var arrOfKeysTmp=arrOfKeys;var maxRatioObj=arrOfKeysTmp.reduce(function(prev,current){return prev.ratio>current.ratio?prev:current;});// get the object with maximun ratio\nvar maxRatioIndex=arrOfKeys.findIndex(function(o){return o.ratio===maxRatioObj.ratio;});// find the object index \nvar potentialId=maxRatioObj.k;// potential key to be id\nvar total=0;var arrOfKeysTmpCopy=arrOfKeysTmp;var arrCon=[];maxRatioObj.v.map(function(itemToSearch){var totalObjConnection=0;arrOfKeysTmpCopy.map(function(searchInto){if(searchInto.k!==potentialId){// sreach in all other keys beside the potential\nvar count=_this.countAppearence(itemToSearch,searchInto.v);if(count!==0){arrCon.push(searchInto.k);// build array of connection types, tmp\n}totalObjConnection+=count;total+=count;}});if(totalObjConnection===0){//console.log(itemToSearch,' has no connections')\n}else{//console.log(itemToSearch, 'has ',totalObjConnection,' connections')\n}});if(total>maxRatioObj.v.length){isId=true;console.log(potentialId+' is the key that found uniqe');}arrConnections=_this.getConnections(arrCon);_this.setState({connectionsAll:arrConnections});return potentialId;};_this.countAppearence=function(item,arr){var count=arr.reduce(function(n,val){return n+(val===item);},0);return count;};_this.getConnections=function(arr){var arrConnectionType2=[];var tmpArrConnectionType2=Array.from(new Set(arr));// remove duplicate connections\nfor(var i=0;i<tmpArrConnectionType2.length;i++){// create array of key value pair\n//let count= this.countAppearence(tmpArrConnectionType2[i],arr)\nvar obj={name:tmpArrConnectionType2[i],conAmount:0,isChecked:true};arrConnectionType2.push(obj);}console.log(arrConnectionType2);return arrConnectionType2;};_this.getNodes=function(arr,id){var nodesToAdd=[];for(var item in arr){var newNode=arr[item];//create new node\nnewNode.id=arr[item][id];newNode.nodeImage='';for(var key in arr[item]){// look for an image URL in the object\nif(typeof arr[item][key]==='object'){for(var k in arr[item][key]){var isImageString=isImage(arr[item][key][k]);if(isImageString){newNode.nodeImage=arr[item][key][k];break;}}}else if(typeof arr[item][key]==='string'){var isImageString=isImage(arr[item][key]);if(isImageString){newNode.nodeImage=arr[item][key];break;}}else{console.log(typeof arr[item][key]);break;}}nodesToAdd.push(newNode);}finalJsonNetwork.nodes=nodesToAdd;console.log(finalJsonNetwork.nodes);_this.setState({finalJson:finalJsonNetwork},function(){_this.getLinks(rawData,id,arrConnections);});};_this.getLinks=function(arr,id,arrConnections){console.log('inside get links');console.log(_this.state.finalJson);var linksToAdd=[];var tmpArr=arr;// search links in the original array, every loop we dismiss the current\nfor(var item in tmpArr){var searchedItem=tmpArr[item][id];var itemToAddBack=tmpArr[item];var withoutCorrent=tmpArr;withoutCorrent.splice(item,1);// dismiss the current\nfor(var i in withoutCorrent){for(var key in withoutCorrent[i]){if(key!==id&&key!=='id'){// search all keys bedise 'id', beacuse it key we added\nif(typeof withoutCorrent[i][key]==='object'){for(var j=0;j<withoutCorrent[i][key].length;j++){if(searchedItem===withoutCorrent[i][key][j]){var newLink={target:withoutCorrent[i][id],source:searchedItem,connectionType:key};linksToAdd.push(newLink);//create new link                                 \n}}}else{if(searchedItem===withoutCorrent[i][key]){var _newLink={source:withoutCorrent[i][id],target:searchedItem,connectionType:key};linksToAdd.push(_newLink);}}}}}withoutCorrent.splice(item,0,itemToAddBack);// return back the current\ntmpArr=withoutCorrent;}//  remove duplicate links\nvar linksTmp=linksToAdd.filter(function(ele,ind){return ind===linksToAdd.findIndex(function(elem){return elem.source===ele.source&&elem.target===ele.target;});});//  remove nodes without links\nvar originalArray2=_this.state.finalJson.nodes;var nodesWithLinks=[];var nodesWithoutLinks=[];var cnt=0;var cntWithout=0;var originalArray=Array.from(new Set(originalArray2));console.log(originalArray);for(var _arr in originalArray){var hasLink=false;for(var filter in linksTmp){if(originalArray[_arr].id===linksTmp[filter].target||originalArray[_arr].id===linksTmp[filter].source){hasLink=true;}}if(hasLink){cnt++;nodesWithLinks.push(originalArray[_arr]);}else{cntWithout++;nodesWithoutLinks.push(originalArray[_arr]);}}// remove duplicates\nnodesWithLinks=nodesWithLinks.filter(function(ele,ind){return ind===nodesWithLinks.findIndex(function(elem){return elem.id===ele.id&&elem.id===ele.id;});});nodesWithoutLinks=nodesWithoutLinks.filter(function(ele,ind){return ind===nodesWithoutLinks.findIndex(function(elem){return elem.id===ele.id&&elem.id===ele.id;});});originalArray=originalArray.filter(function(ele,ind){return ind===originalArray.findIndex(function(elem){return elem.id===ele.id&&elem.id===ele.id;});});console.log('with',cnt);console.log('without',cntWithout);console.log('original ',originalArray);console.log('nodesWithLinks ',nodesWithLinks);console.log('nodesWithoutLinks ',nodesWithoutLinks);//count total connection type amount\nlinksTmp.map(function(i){var pos=arrConnections.map(function(e){return e.name;}).indexOf(i.connectionType);var count=arrConnections[pos].conAmount;count++;arrConnections[pos].conAmount=count;});arrConnections.sort(function(a,b){//    sort connection types by amount of appearence\nreturn b.conAmount-a.conAmount;});finalJsonNetwork.links=linksTmp;finalJsonNetwork.nodes=nodesWithLinks;console.log(finalJsonNetwork);console.log(arrConnections);//this.forceUpdate();\n_this.setState({finalJson:finalJsonNetwork,connectionsAll:arrConnections,allNodes:originalArray});};_this.goToGame=function(){console.log(\"inside game\");var dataToPass=_this.state.finalJson;//var nodesData = this.state.allNodes;\n_this.props.history.push({pathname:'/game',state:{finalJson:dataToPass}});};var local=true;_this.apiUrl='https://localhost:44312/api/';if(!local){_this.apiUrl='http://proj.ruppin.ac.il/igroup8/prod/api/';}_this.state={//dataBefore: this.props.location.state.jsonDetails.rawData,\nfinalJson:{nodes:[],links:[]},removedLinks:[],// save the connections that removed\nconnectionsAll:[],allNodes:[]};return _this;}_createClass(Graph,[{key:\"componentDidMount\",value:function componentDidMount(){arrKeysAndRadio=this.getKeys(rawData);console.log(arrKeysAndRadio);var id=this.getId(arrKeysAndRadio);if(id!==''){this.getNodes(rawData,id);//this.getLinks(rawData, id, arrConnections);\n}}},{key:\"render\",value:function render(){var _this2=this;if(localStorage.getItem('jsonRowData')){rawData=JSON.parse(localStorage.getItem('jsonRowData'));}else{rawData=this.props.location.state.jsonDetails.rawData;}if(localStorage.getItem('jsonDetails')){dataFromLocal=JSON.parse(localStorage.getItem('jsonDetails'));}else{dataFromLocal=this.props.location.state.jsonDetails.rawData;}//rawData= this.props.location.state.jsonDetails.rawData;\nconsole.log('render',this.state.finalJson);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xs:12},/*#__PURE__*/React.createElement(FoundDataInFile,{removeAll:this.RemoveAllConnections,passedFunction:this.RemoveConnection,data:arrKeysAndRadio,details:dataFromLocal,connections:arrConnections}))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Button,{style:{padding:'1.175rem 0.75rem',fontSize:'1.1rem',marginBottom:'2rem'},variant:\"btn btn-info \",onClick:function onClick(){return _this2.postJsonToDB(finalJsonNetwork);}},\"Save network to DB\"))),/*#__PURE__*/React.createElement(Row,{className:\"overflow-hidden\"},/*#__PURE__*/React.createElement(ForceGraph3D,{graphData:this.state.finalJson,nodeLabel:\"id\",linkLabel:\"connectionType\",nodeAutoColorBy:\"id\",nodeRelSize:8,linkThreeObjectExtend:true,showNavInfo:false,backgroundColor:\"rgb(164, 184, 204)\",linkWidth:2,refresh:true}))));}}]);return Graph;}(Component);export default withRouter(Graph);","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/src/Components/Graph.jsx"],"names":["React","Component","Button","Container","Row","Col","withRouter","ForceGraph3D","FoundDataInFile","gotData","finalJsonNetwork","nodes","links","removedLinksTmp","arrConnections","arrKeysAndRadio","dataFromLocal","rawData","isImage","require","Graph","props","postJsonToDB","file","nodesList","map","item","image","index","vx","vy","vz","x","y","z","color","__threeObj","withoutGraphParams","str","JSON","stringify","strW","replace","id","idW","singleNode","NodeNum","NodeImageURL","nodeImage","NodeDescription","nodesListAll","state","allNodes","linksList","sour","source","sourW","targ","target","targW","singleLink","SourceNode","TargetNode","ConnectionType","connectionType","ConnectionWeight","console","log","location","jsonDetails","subject","tableName","fetch","apiUrl","method","body","headers","Headers","then","res","json","result","error","RemoveAllConnections","btnState","removedLinks","i","push","splice","o","isChecked","setState","connectionsAll","finalJson","RemoveConnection","checked","pos","e","name","indexOf","value","remove","j","count","k","funclear","temp","l","getKeys","rawArr","totalObj","length","arrAllKeys","Object","keys","forEach","values","arrDistinctKeys","Array","from","Set","keysAndValues","countKeyRatio","arrDistinct","arrAll","totalObjCount","arrKeysAndRadio2","search","countKey","reduce","n","val","objValuesTmp","addValues","objValues","keyRatio","parseFloat","toFixed","obj","v","amount","ratio","sort","a","b","arrTmp","g","type","getId","arrOfKeys","isId","arrOfKeysTmp","maxRatioObj","prev","current","maxRatioIndex","findIndex","potentialId","total","arrOfKeysTmpCopy","arrCon","itemToSearch","totalObjConnection","searchInto","countAppearence","getConnections","arr","arrConnectionType2","tmpArrConnectionType2","conAmount","getNodes","nodesToAdd","newNode","key","isImageString","getLinks","linksToAdd","tmpArr","searchedItem","itemToAddBack","withoutCorrent","newLink","linksTmp","filter","ele","ind","elem","originalArray2","nodesWithLinks","nodesWithoutLinks","cnt","cntWithout","originalArray","hasLink","goToGame","dataToPass","history","pathname","local","localStorage","getItem","parse","padding","fontSize","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import Data from \"../gotData.json\";\nimport { Button, Container, Row, Col } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { ForceGraph3D } from 'react-force-graph';\nimport FoundDataInFile from './FoundDataInFile';\nimport gotData from '../gotData.json'\n//import { easeLinear } from 'd3';\n\n\n//var finalJson = { nodes: [], links: [] };\nvar finalJsonNetwork = { nodes: [], links: [] }\nvar removedLinksTmp = [];      // save the connections that removed\nvar arrConnections = [];\nvar arrKeysAndRadio = [];\nvar dataFromLocal = [];\nvar rawData = [];\n//const isImageUrl = require('is-image-url');\nconst isImage = require('is-image');\nclass Graph extends Component {\n    constructor(props) {\n        super(props)\n        //let local = false;\n        let local = true;\n        this.apiUrl = 'https://localhost:44312/api/';\n        if (!local) {\n            this.apiUrl = 'http://proj.ruppin.ac.il/igroup8/prod/api/';\n        }\n        this.state = {\n            //dataBefore: this.props.location.state.jsonDetails.rawData,\n            finalJson: { nodes: [], links: [] },\n            removedLinks: [],       // save the connections that removed\n            connectionsAll: [],\n            allNodes: []\n\n        }\n    }\n\n    postJsonToDB = (file) => {                              // save nodes and links to DB\n        const nodesList = file.nodes.map(item => {\n            const { image, index, vx, vy, vz, x, y, z, color, __threeObj, ...withoutGraphParams } = item;         //  remove all graph parameters like vx, vy.....\n            let str = JSON.stringify(withoutGraphParams)\n            let strW = str.replace(/'/g, \"\").replace(/\"|{|}/g, \"\");\n            let id = item.id;\n            let idW = id.replace(/'/g, \"\");\n            var singleNode = {\n                NodeNum: idW,\n                NodeImageURL: item.nodeImage,\n                NodeDescription: strW\n            }\n            return singleNode;\n        })\n\n        const nodesListAll = this.state.allNodes.map(item => {\n            const { image, index, vx, vy, vz, x, y, z, color, __threeObj, ...withoutGraphParams } = item;         //  remove all graph parameters like vx, vy.....\n            let str = JSON.stringify(withoutGraphParams)\n            let strW = str.replace(/'/g, \"\").replace(/\"|{|}/g, \"\");\n            let id = item.id;\n            let idW = id.replace(/'/g, \"\");\n            var singleNode = {\n                NodeNum: idW,\n                NodeImageURL: item.nodeImage,\n                NodeDescription: strW\n            }\n            return singleNode;\n        })\n\n        const linksList = file.links.map(item => {\n            let sour = item.source.id;\n            let sourW = sour.replace(/'/g, \"\");\n            let targ = item.target.id;\n            let targW = targ.replace(/'/g, \"\");\n            var singleLink = {\n                SourceNode: sourW,\n                TargetNode: targW,\n                ConnectionType: item.connectionType,\n                ConnectionWeight: 1\n\n            }\n            return singleLink;\n        })\n\n        console.log(linksList);\n        console.log(this.props.location.state.jsonDetails);\n        let str = this.props.location.state.jsonDetails.subject;\n        console.log(str)\n        var tableName = str.replace(/ /g, \"_\");\n        console.log(tableName)\n\n\n        fetch(this.apiUrl + 'nodes/' + tableName, {        //POST nodes with links\n            method: 'POST',\n            body: JSON.stringify(nodesList),\n            //mode: 'no-cors',\n            headers: new Headers({\n                'Content-type': 'application/json; charset=UTF-8'\n            })\n        })\n            .then(res => {\n                console.log('res=', res);\n                return res.json()\n            })\n            .then(\n                (result) => {\n                    console.log(\"fetch POST= \", result);\n                },\n                (error) => {\n                    console.log(\"err post=\", error);\n                });\n\n\n        fetch(this.apiUrl + 'nodesSaveAll/' + tableName, {        //POST nodes with / without links\n            method: 'POST',\n            body: JSON.stringify(nodesListAll),\n            //mode: 'no-cors',\n            headers: new Headers({\n                'Content-type': 'application/json; charset=UTF-8'\n            })\n        })\n            .then(res => {\n                console.log('res=', res);\n                return res.json()\n            })\n            .then(\n                (result) => {\n                    console.log(\"fetch POST= \", result);\n                },\n                (error) => {\n                    console.log(\"err post=\", error);\n                });\n        fetch(this.apiUrl + 'links/' + tableName, {              //POST links\n            method: 'POST',\n            body: JSON.stringify(linksList),\n            headers: new Headers({\n                'Content-type': 'application/json; charset=UTF-8'\n            })\n        })\n            .then(res => {\n                console.log('res=', res);\n                return res.json()\n            })\n            .then(\n                (result) => {\n                    console.log(\"fetch POST= \", result);\n                },\n                (error) => {\n                    console.log(\"err post=\", error);\n                });\n    }\n\n    RemoveAllConnections = (btnState) => {\n        console.log(btnState)\n        removedLinksTmp = this.state.removedLinks;\n        console.log(finalJsonNetwork.links)\n        if (btnState === 'allUnchacked') {\n            finalJsonNetwork.links.map(i => removedLinksTmp.push(i))\n            finalJsonNetwork.links.splice(0);\n\n            console.log('links remain: ', finalJsonNetwork.links)\n            console.log('removed ', removedLinksTmp);\n            arrConnections.map(o => {\n                o.isChecked = false\n            })\n        }\n        else {\n            removedLinksTmp.map(i => finalJsonNetwork.links.push(i))\n            removedLinksTmp.splice(0);\n            console.log('links remain: ', finalJsonNetwork.links)\n            console.log('removed ', removedLinksTmp);\n            arrConnections.map(o => {\n                o.isChecked = true\n            })\n        }\n\n        this.setState({\n            connectionsAll: arrConnections,\n            finalJson: finalJsonNetwork,\n            removedLinks: removedLinksTmp,\n        })\n    }\n\n    RemoveConnection = (x) => {             // add / remove connection type   \n        removedLinksTmp = this.state.removedLinks;\n        console.log(removedLinksTmp, finalJsonNetwork)\n        if (!x.target.checked) {         //  if connection removed        \n            let pos = arrConnections.map(function (e) { return e.name; }).indexOf(x.target.value);\n            arrConnections[pos].isChecked = false;\n            this.setState({ connectionsAll: arrConnections })\n            remove();\n\n            function remove() {\n                for (let j in finalJsonNetwork.links) {\n                    if (finalJsonNetwork.links[j].connectionType === x.target.value) {\n                        removedLinksTmp.push(finalJsonNetwork.links[j]);\n                        finalJsonNetwork.links.splice(j, 1);\n                    }\n                }\n                let count = 0;\n                for (let k in finalJsonNetwork.links) {\n                    if (finalJsonNetwork.links[k].connectionType === x.target.value) {\n                        count++\n                    };\n                    if (count > 0) {\n                        remove();\n                    }\n                }\n            }\n        }\n        else {\n            let pos = arrConnections.map(function (e) { return e.name; }).indexOf(x.target.value);\n            arrConnections[pos].isChecked = true;\n            this.setState({ connectionsAll: arrConnections })\n            funclear();\n            function funclear() {\n                for (let k in removedLinksTmp) {\n                    if (removedLinksTmp[k].connectionType === x.target.value) {\n                        finalJsonNetwork.links.push(removedLinksTmp[k]);\n                        removedLinksTmp.splice(k, 1);\n                    }\n                }\n                let temp = 0;\n                for (let l in removedLinksTmp) {\n                    if (removedLinksTmp[l].connectionType === x.target.value) {\n                        temp++;\n                    };\n                    if (temp > 0) {\n                        funclear();\n                    }\n                }\n            }\n        }\n        console.log(\"removed: \", removedLinksTmp);\n        console.log('finaljson: ', finalJsonNetwork)\n        console.log(this.state.connectionsAll)\n        this.setState({\n            finalJson: finalJsonNetwork,\n            removedLinks: removedLinksTmp\n        });\n        //this.forceUpdate();\n\n    }\n\n    componentDidMount() {\n        arrKeysAndRadio = this.getKeys(rawData)\n        console.log(arrKeysAndRadio)\n        var id = this.getId(arrKeysAndRadio);\n        if (id !== '') {\n            this.getNodes(rawData, id);\n            //this.getLinks(rawData, id, arrConnections);\n        }\n    }\n\n    getKeys = (rawArr) => {\n        let totalObj = rawArr.length;                 // total amount of object in original array\n        let arrAllKeys = [];                      // all keys including duplicates\n        Object.keys(rawArr).forEach(function (k) {\n            const values = Object.keys(rawArr[k])\n            values.map((i) => {\n                arrAllKeys.push(i)\n            });\n        });\n        let arrDistinctKeys = Array.from(new Set(arrAllKeys));       // remove duplicates\n        var keysAndValues = this.countKeyRatio(arrDistinctKeys, arrAllKeys, totalObj)             // get ratio for key\n        return keysAndValues\n    }\n\n    countKeyRatio = (arrDistinct, arrAll, totalObjCount) => {\n        const arrKeysAndRadio2 = [];\n        arrDistinct.map((i) => {\n            var search = i;\n            var countKey = arrAll.reduce(function (n, val) {        // counts total amount of key appearence in the array\n                return n + (val === search);\n            }, 0);\n            let objValuesTmp = this.addValues(i);\n            let objValues = Array.from(new Set(objValuesTmp));      // remove duplicates values\n            let keyRatio = parseFloat((objValues.length / totalObjCount).toFixed(3));\n            let obj = {\n                k: i, v: objValues, amount: countKey, ratio: keyRatio\n            }\n            arrKeysAndRadio2.push(obj)\n\n        });\n        arrKeysAndRadio2.sort(function (a, b) {           //    sort keys by ratio\n            return b.ratio - a.ratio;\n        });\n        return arrKeysAndRadio2\n    }\n\n    addValues = (index) => {          // get all values for key \n        var val = [];\n        var arrTmp = rawData;\n        for (let g in arrTmp) {\n            if (arrTmp[g][index]) {                     //אם בכלל קיים שדה כזה\n                let type = typeof (arrTmp[g][index])\n                if (type === 'object') {\n                    arrTmp[g][index].map(item => {\n                        val.push(item)\n                    })\n                }\n                else {\n                    val.push(arrTmp[g][index])\n                }\n            }\n        }\n        return val;\n    }\n\n    getId = (arrOfKeys) => {\n        let isId = false;\n        var arrOfKeysTmp = arrOfKeys;\n        var maxRatioObj = arrOfKeysTmp.reduce((prev, current) => (prev.ratio > current.ratio) ? prev : current);  // get the object with maximun ratio\n        var maxRatioIndex = arrOfKeys.findIndex(o => o.ratio === maxRatioObj.ratio);     // find the object index \n        let potentialId = maxRatioObj.k;            // potential key to be id\n        let total = 0;\n        var arrOfKeysTmpCopy = arrOfKeysTmp;\n        var arrCon = [];\n        maxRatioObj.v.map((itemToSearch) => {\n            var totalObjConnection = 0;\n            arrOfKeysTmpCopy.map((searchInto) => {\n                if (searchInto.k !== potentialId) {                      // sreach in all other keys beside the potential\n                    var count = this.countAppearence(itemToSearch, searchInto.v);\n                    if (count !== 0) {\n                        arrCon.push(searchInto.k)    // build array of connection types, tmp\n\n                    }\n                    totalObjConnection += count;\n                    total += count;\n                }\n            })\n\n            if (totalObjConnection === 0) {\n                //console.log(itemToSearch,' has no connections')\n            }\n            else {\n                //console.log(itemToSearch, 'has ',totalObjConnection,' connections')\n            }\n        })\n        if (total > maxRatioObj.v.length) {\n            isId = true;\n            console.log(potentialId + ' is the key that found uniqe')\n        }\n        arrConnections = this.getConnections(arrCon);\n        this.setState({\n            connectionsAll: arrConnections\n        })\n        return potentialId\n    }\n\n    countAppearence = (item, arr) => {\n        var count = arr.reduce(function (n, val) {\n            return n + (val === item);\n        }, 0);\n        return count\n    }\n\n    getConnections = (arr) => {\n        var arrConnectionType2 = [];\n        var tmpArrConnectionType2 = Array.from(new Set(arr));           // remove duplicate connections\n        for (let i = 0; i < tmpArrConnectionType2.length; i++) {                                   // create array of key value pair\n            //let count= this.countAppearence(tmpArrConnectionType2[i],arr)\n            let obj = {\n                name: tmpArrConnectionType2[i],\n                conAmount: 0,\n                isChecked: true\n            }\n            arrConnectionType2.push(obj)\n        }\n        console.log(arrConnectionType2);\n        return arrConnectionType2;\n    }\n\n    getNodes = (arr, id) => {\n        var nodesToAdd = [];\n        for (let item in arr) {\n            let newNode = arr[item];                        //create new node\n            newNode.id = arr[item][id];\n            newNode.nodeImage = '';\n            for (let key in arr[item]) {                // look for an image URL in the object\n                if (typeof arr[item][key] === 'object') {\n                    for (let k in arr[item][key]) {\n                        var isImageString = isImage(arr[item][key][k]);\n                        if (isImageString) {\n                            newNode.nodeImage = arr[item][key][k]\n                            break\n                        }\n                    }\n                }\n                else if (typeof arr[item][key] === 'string') {\n                    var isImageString = isImage(arr[item][key]);\n                    if (isImageString) {\n                        newNode.nodeImage = arr[item][key]\n                        break\n                    }\n                }\n                else {\n                    console.log(typeof arr[item][key])\n                    break\n                }\n            }\n            nodesToAdd.push(newNode);\n        }\n        finalJsonNetwork.nodes = nodesToAdd;\n        console.log(finalJsonNetwork.nodes);\n        this.setState({ finalJson: finalJsonNetwork }, () => { this.getLinks(rawData, id, arrConnections) })\n\n    }\n\n    getLinks = (arr, id, arrConnections) => {\n        console.log('inside get links')\n        console.log(this.state.finalJson)\n        var linksToAdd = [];\n        var tmpArr = arr;                      // search links in the original array, every loop we dismiss the current\n\n        for (let item in tmpArr) {\n            var searchedItem = tmpArr[item][id];\n            let itemToAddBack = tmpArr[item];\n            var withoutCorrent = tmpArr;\n            withoutCorrent.splice(item, 1);          // dismiss the current\n            for (let i in withoutCorrent) {\n                for (let key in withoutCorrent[i]) {\n                    if (key !== id && key !== 'id') {                   // search all keys bedise 'id', beacuse it key we added\n                        if (typeof withoutCorrent[i][key] === 'object') {\n                            for (let j = 0; j < withoutCorrent[i][key].length; j++) {\n                                if (searchedItem === withoutCorrent[i][key][j]) {\n                                    let newLink = { target: withoutCorrent[i][id], source: searchedItem, connectionType: key }\n                                    linksToAdd.push(newLink)                //create new link                                 \n                                }\n                            }\n                        }\n                        else {\n                            if (searchedItem === withoutCorrent[i][key]) {\n                                let newLink = { source: withoutCorrent[i][id], target: searchedItem, connectionType: key }\n                                linksToAdd.push(newLink);\n                            }\n                        }\n                    }\n                }\n            }\n            withoutCorrent.splice(item, 0, itemToAddBack)         // return back the current\n            tmpArr = withoutCorrent;\n        }\n\n\n        //  remove duplicate links\n        var linksTmp = linksToAdd.filter((ele, ind) => ind === linksToAdd.findIndex(elem => elem.source === ele.source && elem.target === ele.target))\n\n        //  remove nodes without links\n        var originalArray2 = this.state.finalJson.nodes;\n        var nodesWithLinks = [];\n        var nodesWithoutLinks = [];\n        var cnt = 0;\n        var cntWithout = 0;\n        var originalArray = Array.from(new Set(originalArray2));\n        console.log(originalArray)\n        for (let arr in originalArray) {\n            var hasLink = false;\n            for (let filter in linksTmp) {\n                if (originalArray[arr].id === linksTmp[filter].target || originalArray[arr].id === linksTmp[filter].source) {\n                    hasLink = true;\n                }\n            }\n            if (hasLink) {\n                cnt++;\n                nodesWithLinks.push(originalArray[arr]);\n\n            }\n\n            else {\n                cntWithout++;\n                nodesWithoutLinks.push(originalArray[arr])\n\n            }\n        }\n\n        // remove duplicates\n        nodesWithLinks = nodesWithLinks.filter((ele, ind) => ind === nodesWithLinks.findIndex(elem => elem.id === ele.id && elem.id === ele.id))\n        nodesWithoutLinks = nodesWithoutLinks.filter((ele, ind) => ind === nodesWithoutLinks.findIndex(elem => elem.id === ele.id && elem.id === ele.id))\n        originalArray = originalArray.filter((ele, ind) => ind === originalArray.findIndex(elem => elem.id === ele.id && elem.id === ele.id))\n\n        console.log('with', cnt)\n        console.log('without', cntWithout)\n        console.log('original ', originalArray)\n        console.log('nodesWithLinks ', nodesWithLinks)\n        console.log('nodesWithoutLinks ', nodesWithoutLinks)\n\n\n        //count total connection type amount\n        linksTmp.map(i => {\n            let pos = arrConnections.map(function (e) { return e.name; }).indexOf(i.connectionType);\n            let count = arrConnections[pos].conAmount;\n            count++;\n            arrConnections[pos].conAmount = count;\n        })\n\n        arrConnections.sort(function (a, b) {           //    sort connection types by amount of appearence\n            return b.conAmount - a.conAmount;\n        });\n\n\n        finalJsonNetwork.links = linksTmp;\n        finalJsonNetwork.nodes = nodesWithLinks;\n        console.log(finalJsonNetwork)\n        console.log(arrConnections)\n        //this.forceUpdate();\n        this.setState({\n            finalJson: finalJsonNetwork,\n            connectionsAll: arrConnections,\n            allNodes: originalArray\n        })\n\n    }\n\n    goToGame = () => {\n        console.log(\"inside game\")\n        var dataToPass = this.state.finalJson;\n        //var nodesData = this.state.allNodes;\n        this.props.history.push({\n            pathname: '/game',\n            state: {\n                finalJson: dataToPass,\n \n            }\n        });\n\n    }\n\n    render() {\n        if (localStorage.getItem('jsonRowData')) {\n            rawData = JSON.parse(localStorage.getItem('jsonRowData'));\n        }\n        else {\n            rawData = this.props.location.state.jsonDetails.rawData;\n        }\n        if (localStorage.getItem('jsonDetails')) {\n            dataFromLocal = JSON.parse(localStorage.getItem('jsonDetails'));\n        }\n        else {\n            dataFromLocal = this.props.location.state.jsonDetails.rawData\n        }\n        //rawData= this.props.location.state.jsonDetails.rawData;\n\n        console.log('render', this.state.finalJson)\n\n        return (\n            <div>\n                <Container>\n                    <Row><br /></Row>\n                    <Row><br /></Row>\n                    <Row>\n                        <Col xs={12}>\n                            <FoundDataInFile removeAll={this.RemoveAllConnections} passedFunction={this.RemoveConnection} data={arrKeysAndRadio} details={dataFromLocal} connections={arrConnections} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button style={{ padding: '1.175rem 0.75rem', fontSize: '1.1rem', marginBottom: '2rem' }} variant=\"btn btn-info \" onClick={() => this.postJsonToDB(finalJsonNetwork)}>Save network to DB</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"overflow-hidden\">\n\n                        <ForceGraph3D\n                            graphData={this.state.finalJson}\n                            nodeLabel=\"id\"\n                            linkLabel=\"connectionType\"\n                            nodeAutoColorBy=\"id\"\n                            nodeRelSize={8}\n                            linkThreeObjectExtend={true}\n                            showNavInfo={false}\n                            backgroundColor=\"rgb(164, 184, 204)\"\n                            linkWidth={2}\n                            refresh={true}\n                        />\n\n                    </Row>\n                   {/*<Row>\n                        <Col>\n                            <Button style={{ padding: '1.175rem 0.75rem', fontSize: '1.1rem', marginBottom: '2rem' }} variant=\"btn btn-info\" onClick={this.goToGame}>Start \"play\"</Button>\n                        </Col>\n                    </Row>\n                    * */} \n                </Container>\n            </div >\n        )\n    }\n}\n\nexport default withRouter(Graph); "]},"metadata":{},"sourceType":"module"}