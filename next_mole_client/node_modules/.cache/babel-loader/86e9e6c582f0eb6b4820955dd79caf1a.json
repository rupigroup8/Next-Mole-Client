{"ast":null,"code":"module.exports = createLayout;\nmodule.exports.simulator = require('ngraph.physics.simulator');\n\nvar eventify = require('ngraph.events');\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\n\n\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = require('ngraph.physics.simulator');\n\n  var physicsSimulator = createSimulator(physicsSettings);\n  var nodeMass = defaultNodeMass;\n\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n  var springTransform = physicsSimulator.settings.springTransform || noop; // Initialize physics with what we have in the graph:\n\n  initPhysics();\n  listenToEvents();\n  var wasStable = false;\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function step() {\n      if (bodiesCount === 0) return true; // TODO: This will never fire 'stable'\n\n      var lastMove = physicsSimulator.step(); // Save the movement in case if someone wants to query it in the step\n      // callback.\n\n      api.lastMove = lastMove; // Allow listeners to perform low-level actions after nodes are updated.\n\n      api.fire('step');\n      var ratio = lastMove / bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n\n      if (wasStable !== isStableNow) {\n        wasStable = isStableNow;\n        onStableChanged(isStableNow);\n      }\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function getNodePosition(nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function setNodePosition(nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n      physicsSimulator.invalidateBBox();\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function getLinkPosition(linkId) {\n      var spring = springs[linkId];\n\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function getGraphRect() {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function pinNode(node, isPinned) {\n      var body = getInitializedBody(node.id);\n      body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function isNodePinned(node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function dispose() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n  eventify(api);\n  return api;\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(function (body, bodyId) {\n      cb(body, bodyId);\n    });\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n\n    if (!body) {\n      var node = graph.getNode(nodeId);\n\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n    springTransform(link, spring);\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n      delete springs[link.id];\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n\n    if (!node.links) {\n      return neighbors;\n    }\n\n    var maxNeighbors = Math.min(node.links.length, 2);\n\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n\n\n  function isNodeOriginallyPinned(node) {\n    return node && (node.isPinned || node.data && node.data.isPinned);\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n\n    return body;\n  }\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n\n\n  function defaultNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n}\n\nfunction noop() {}","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.forcelayout/index.js"],"names":["module","exports","createLayout","simulator","require","eventify","graph","physicsSettings","Error","createSimulator","physicsSimulator","nodeMass","defaultNodeMass","nodeBodies","Map","springs","bodiesCount","springTransform","settings","noop","initPhysics","listenToEvents","wasStable","api","step","lastMove","fire","ratio","isStableNow","onStableChanged","getNodePosition","nodeId","getInitializedBody","pos","setNodePosition","body","setPosition","apply","Array","prototype","slice","call","arguments","invalidateBBox","getLinkPosition","linkId","spring","from","to","getGraphRect","getBBox","forEachBody","pinNode","node","isPinned","id","isNodePinned","dispose","off","onGraphChanged","getBody","getSpring","cb","forEach","bodyId","fromId","toId","undefined","link","hasLink","get","on","isStable","changes","i","length","change","changeType","initBody","initLink","releaseNode","releaseLink","getNodesCount","forEachNode","forEachLink","getNode","position","neighbors","getNeighborBodies","getBestNewBodyPosition","addBodyAt","set","updateBodyMass","isNodeOriginallyPinned","delete","removeBody","fromBody","toBody","addSpring","removeSpring","links","maxNeighbors","Math","min","otherBody","push","mass","Number","isNaN","data","getLinks"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,SAAf,GAA2BC,OAAO,CAAC,0BAAD,CAAlC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAtB;AAEA;;;;;;;;;;AAQA,SAASF,YAAT,CAAsBI,KAAtB,EAA6BC,eAA7B,EAA8C;AAC5C,MAAI,CAACD,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,MAAIC,eAAe,GAAGL,OAAO,CAAC,0BAAD,CAA7B;;AACA,MAAIM,gBAAgB,GAAGD,eAAe,CAACF,eAAD,CAAtC;AAEA,MAAII,QAAQ,GAAGC,eAAf;;AACA,MAAIL,eAAe,IAAI,OAAOA,eAAe,CAACI,QAAvB,KAAoC,UAA3D,EAAuE;AACrEA,IAAAA,QAAQ,GAAGJ,eAAe,CAACI,QAA3B;AACD;;AAED,MAAIE,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;AAEA,MAAIC,eAAe,GAAGP,gBAAgB,CAACQ,QAAjB,CAA0BD,eAA1B,IAA6CE,IAAnE,CAjB4C,CAmB5C;;AACAC,EAAAA,WAAW;AACXC,EAAAA,cAAc;AAEd,MAAIC,SAAS,GAAG,KAAhB;AAEA,MAAIC,GAAG,GAAG;AACR;;;;;;AAMAC,IAAAA,IAAI,EAAE,gBAAW;AACf,UAAIR,WAAW,KAAK,CAApB,EAAuB,OAAO,IAAP,CADR,CACqB;;AAEpC,UAAIS,QAAQ,GAAGf,gBAAgB,CAACc,IAAjB,EAAf,CAHe,CAKf;AACA;;AACAD,MAAAA,GAAG,CAACE,QAAJ,GAAeA,QAAf,CAPe,CASf;;AACAF,MAAAA,GAAG,CAACG,IAAJ,CAAS,MAAT;AAEA,UAAIC,KAAK,GAAGF,QAAQ,GAACT,WAArB;AACA,UAAIY,WAAW,GAAGD,KAAK,IAAI,IAA3B,CAbe,CAakB;;AAEjC,UAAIL,SAAS,KAAKM,WAAlB,EAA+B;AAC7BN,QAAAA,SAAS,GAAGM,WAAZ;AACAC,QAAAA,eAAe,CAACD,WAAD,CAAf;AACD;;AAED,aAAOA,WAAP;AACD,KA5BO;;AA8BR;;;AAGAE,IAAAA,eAAe,EAAE,yBAAUC,MAAV,EAAkB;AACjC,aAAOC,kBAAkB,CAACD,MAAD,CAAlB,CAA2BE,GAAlC;AACD,KAnCO;;AAqCR;;;;;;;AAOAC,IAAAA,eAAe,EAAE,yBAAUH,MAAV,EAAkB;AACjC,UAAII,IAAI,GAAGH,kBAAkB,CAACD,MAAD,CAA7B;AACAI,MAAAA,IAAI,CAACC,WAAL,CAAiBC,KAAjB,CAAuBF,IAAvB,EAA6BG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAA7B;AACAhC,MAAAA,gBAAgB,CAACiC,cAAjB;AACD,KAhDO;;AAkDR;;;;;AAKAC,IAAAA,eAAe,EAAE,yBAAUC,MAAV,EAAkB;AACjC,UAAIC,MAAM,GAAG/B,OAAO,CAAC8B,MAAD,CAApB;;AACA,UAAIC,MAAJ,EAAY;AACV,eAAO;AACLC,UAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,CAAYd,GADb;AAELe,UAAAA,EAAE,EAAEF,MAAM,CAACE,EAAP,CAAUf;AAFT,SAAP;AAID;AACF,KA/DO;;AAiER;;;;;AAKAgB,IAAAA,YAAY,EAAE,wBAAY;AACxB,aAAOvC,gBAAgB,CAACwC,OAAjB,EAAP;AACD,KAxEO;;AA0ER;;;AAGAC,IAAAA,WAAW,EAAEA,WA7EL;;AA+ER;;;;;AAKAC,IAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACjC,UAAInB,IAAI,GAAGH,kBAAkB,CAACqB,IAAI,CAACE,EAAN,CAA7B;AACCpB,MAAAA,IAAI,CAACmB,QAAL,GAAgB,CAAC,CAACA,QAAlB;AACF,KAvFO;;AAyFR;;;AAGAE,IAAAA,YAAY,EAAE,sBAAUH,IAAV,EAAgB;AAC5B,aAAOrB,kBAAkB,CAACqB,IAAI,CAACE,EAAN,CAAlB,CAA4BD,QAAnC;AACD,KA9FO;;AAgGR;;;AAGAG,IAAAA,OAAO,EAAE,mBAAW;AAClBnD,MAAAA,KAAK,CAACoD,GAAN,CAAU,SAAV,EAAqBC,cAArB;AACApC,MAAAA,GAAG,CAACG,IAAJ,CAAS,UAAT;AACD,KAtGO;;AAwGR;;;;AAIAkC,IAAAA,OAAO,EAAEA,OA5GD;;AA8GR;;;;;;;;AAQAC,IAAAA,SAAS,EAAEA,SAtHH;;AAwHR;;;AAGA1D,IAAAA,SAAS,EAAEO,gBA3HH;;AA6HR;;;AAGAJ,IAAAA,KAAK,EAAEA,KAhIC;;AAkIR;;;AAGAmB,IAAAA,QAAQ,EAAE;AArIF,GAAV;AAwIApB,EAAAA,QAAQ,CAACkB,GAAD,CAAR;AAEA,SAAOA,GAAP;;AAEA,WAAS4B,WAAT,CAAqBW,EAArB,EAAyB;AACvBjD,IAAAA,UAAU,CAACkD,OAAX,CAAmB,UAAS5B,IAAT,EAAe6B,MAAf,EAAuB;AACxCF,MAAAA,EAAE,CAAC3B,IAAD,EAAO6B,MAAP,CAAF;AACD,KAFD;AAGD;;AAED,WAASH,SAAT,CAAmBI,MAAnB,EAA2BC,IAA3B,EAAiC;AAC/B,QAAIrB,MAAJ;;AACA,QAAIqB,IAAI,KAAKC,SAAb,EAAwB;AACtB,UAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9B;AACApB,QAAAA,MAAM,GAAGoB,MAAT;AACD,OAHD,MAGO;AACL;AACApB,QAAAA,MAAM,GAAGoB,MAAM,CAACV,EAAhB;AACD;AACF,KARD,MAQO;AACL;AACA,UAAIa,IAAI,GAAG9D,KAAK,CAAC+D,OAAN,CAAcJ,MAAd,EAAsBC,IAAtB,CAAX;AACA,UAAI,CAACE,IAAL,EAAW;AACXvB,MAAAA,MAAM,GAAGuB,IAAI,CAACb,EAAd;AACD;;AAED,WAAOxC,OAAO,CAAC8B,MAAD,CAAd;AACD;;AAED,WAASe,OAAT,CAAiB7B,MAAjB,EAAyB;AACvB,WAAOlB,UAAU,CAACyD,GAAX,CAAevC,MAAf,CAAP;AACD;;AAED,WAASV,cAAT,GAA0B;AACxBf,IAAAA,KAAK,CAACiE,EAAN,CAAS,SAAT,EAAoBZ,cAApB;AACD;;AAED,WAAS9B,eAAT,CAAyB2C,QAAzB,EAAmC;AACjCjD,IAAAA,GAAG,CAACG,IAAJ,CAAS,QAAT,EAAmB8C,QAAnB;AACD;;AAED,WAASb,cAAT,CAAwBc,OAAxB,EAAiC;AAC/B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,UAAIE,MAAM,GAAGH,OAAO,CAACC,CAAD,CAApB;;AACA,UAAIE,MAAM,CAACC,UAAP,KAAsB,KAA1B,EAAiC;AAC/B,YAAID,MAAM,CAACvB,IAAX,EAAiB;AACfyB,UAAAA,QAAQ,CAACF,MAAM,CAACvB,IAAP,CAAYE,EAAb,CAAR;AACD;;AACD,YAAIqB,MAAM,CAACR,IAAX,EAAiB;AACfW,UAAAA,QAAQ,CAACH,MAAM,CAACR,IAAR,CAAR;AACD;AACF,OAPD,MAOO,IAAIQ,MAAM,CAACC,UAAP,KAAsB,QAA1B,EAAoC;AACzC,YAAID,MAAM,CAACvB,IAAX,EAAiB;AACf2B,UAAAA,WAAW,CAACJ,MAAM,CAACvB,IAAR,CAAX;AACD;;AACD,YAAIuB,MAAM,CAACR,IAAX,EAAiB;AACfa,UAAAA,WAAW,CAACL,MAAM,CAACR,IAAR,CAAX;AACD;AACF;AACF;;AACDpD,IAAAA,WAAW,GAAGV,KAAK,CAAC4E,aAAN,EAAd;AACD;;AAED,WAAS9D,WAAT,GAAuB;AACrBJ,IAAAA,WAAW,GAAG,CAAd;AAEAV,IAAAA,KAAK,CAAC6E,WAAN,CAAkB,UAAU9B,IAAV,EAAgB;AAChCyB,MAAAA,QAAQ,CAACzB,IAAI,CAACE,EAAN,CAAR;AACAvC,MAAAA,WAAW,IAAI,CAAf;AACD,KAHD;AAKAV,IAAAA,KAAK,CAAC8E,WAAN,CAAkBL,QAAlB;AACD;;AAED,WAASD,QAAT,CAAkB/C,MAAlB,EAA0B;AACxB,QAAII,IAAI,GAAGtB,UAAU,CAACyD,GAAX,CAAevC,MAAf,CAAX;;AACA,QAAI,CAACI,IAAL,EAAW;AACT,UAAIkB,IAAI,GAAG/C,KAAK,CAAC+E,OAAN,CAActD,MAAd,CAAX;;AACA,UAAI,CAACsB,IAAL,EAAW;AACT,cAAM,IAAI7C,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,UAAIyB,GAAG,GAAGoB,IAAI,CAACiC,QAAf;;AACA,UAAI,CAACrD,GAAL,EAAU;AACR,YAAIsD,SAAS,GAAGC,iBAAiB,CAACnC,IAAD,CAAjC;AACApB,QAAAA,GAAG,GAAGvB,gBAAgB,CAAC+E,sBAAjB,CAAwCF,SAAxC,CAAN;AACD;;AAEDpD,MAAAA,IAAI,GAAGzB,gBAAgB,CAACgF,SAAjB,CAA2BzD,GAA3B,CAAP;AACAE,MAAAA,IAAI,CAACoB,EAAL,GAAUxB,MAAV;AAEAlB,MAAAA,UAAU,CAAC8E,GAAX,CAAe5D,MAAf,EAAuBI,IAAvB;AACAyD,MAAAA,cAAc,CAAC7D,MAAD,CAAd;;AAEA,UAAI8D,sBAAsB,CAACxC,IAAD,CAA1B,EAAkC;AAChClB,QAAAA,IAAI,CAACmB,QAAL,GAAgB,IAAhB;AACD;AACF;AACF;;AAED,WAAS0B,WAAT,CAAqB3B,IAArB,EAA2B;AACzB,QAAItB,MAAM,GAAGsB,IAAI,CAACE,EAAlB;AACA,QAAIpB,IAAI,GAAGtB,UAAU,CAACyD,GAAX,CAAevC,MAAf,CAAX;;AACA,QAAII,IAAJ,EAAU;AACRtB,MAAAA,UAAU,CAACiF,MAAX,CAAkB/D,MAAlB;AACArB,MAAAA,gBAAgB,CAACqF,UAAjB,CAA4B5D,IAA5B;AACD;AACF;;AAED,WAAS4C,QAAT,CAAkBX,IAAlB,EAAwB;AACtBwB,IAAAA,cAAc,CAACxB,IAAI,CAACH,MAAN,CAAd;AACA2B,IAAAA,cAAc,CAACxB,IAAI,CAACF,IAAN,CAAd;AAEA,QAAI8B,QAAQ,GAAGnF,UAAU,CAACyD,GAAX,CAAeF,IAAI,CAACH,MAApB,CAAf;AAAA,QACIgC,MAAM,GAAIpF,UAAU,CAACyD,GAAX,CAAeF,IAAI,CAACF,IAApB,CADd;AAAA,QAEIpB,MAAM,GAAGpC,gBAAgB,CAACwF,SAAjB,CAA2BF,QAA3B,EAAqCC,MAArC,EAA6C7B,IAAI,CAACO,MAAlD,CAFb;AAIA1D,IAAAA,eAAe,CAACmD,IAAD,EAAOtB,MAAP,CAAf;AAEA/B,IAAAA,OAAO,CAACqD,IAAI,CAACb,EAAN,CAAP,GAAmBT,MAAnB;AACD;;AAED,WAASmC,WAAT,CAAqBb,IAArB,EAA2B;AACzB,QAAItB,MAAM,GAAG/B,OAAO,CAACqD,IAAI,CAACb,EAAN,CAApB;;AACA,QAAIT,MAAJ,EAAY;AACV,UAAIC,IAAI,GAAGzC,KAAK,CAAC+E,OAAN,CAAcjB,IAAI,CAACH,MAAnB,CAAX;AAAA,UACIjB,EAAE,GAAG1C,KAAK,CAAC+E,OAAN,CAAcjB,IAAI,CAACF,IAAnB,CADT;AAGA,UAAInB,IAAJ,EAAU6C,cAAc,CAAC7C,IAAI,CAACQ,EAAN,CAAd;AACV,UAAIP,EAAJ,EAAQ4C,cAAc,CAAC5C,EAAE,CAACO,EAAJ,CAAd;AAER,aAAOxC,OAAO,CAACqD,IAAI,CAACb,EAAN,CAAd;AAEA7C,MAAAA,gBAAgB,CAACyF,YAAjB,CAA8BrD,MAA9B;AACD;AACF;;AAED,WAAS0C,iBAAT,CAA2BnC,IAA3B,EAAiC;AAC/B;AACA,QAAIkC,SAAS,GAAG,EAAhB;;AACA,QAAI,CAAClC,IAAI,CAAC+C,KAAV,EAAiB;AACf,aAAOb,SAAP;AACD;;AACD,QAAIc,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASlD,IAAI,CAAC+C,KAAL,CAAWzB,MAApB,EAA4B,CAA5B,CAAnB;;AACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,YAApB,EAAkC,EAAE3B,CAApC,EAAuC;AACrC,UAAIN,IAAI,GAAGf,IAAI,CAAC+C,KAAL,CAAW1B,CAAX,CAAX;AACA,UAAI8B,SAAS,GAAGpC,IAAI,CAACH,MAAL,KAAgBZ,IAAI,CAACE,EAArB,GAA0B1C,UAAU,CAACyD,GAAX,CAAeF,IAAI,CAACH,MAApB,CAA1B,GAAwDpD,UAAU,CAACyD,GAAX,CAAeF,IAAI,CAACF,IAApB,CAAxE;;AACA,UAAIsC,SAAS,IAAIA,SAAS,CAACvE,GAA3B,EAAgC;AAC9BsD,QAAAA,SAAS,CAACkB,IAAV,CAAeD,SAAf;AACD;AACF;;AAED,WAAOjB,SAAP;AACD;;AAED,WAASK,cAAT,CAAwB7D,MAAxB,EAAgC;AAC9B,QAAII,IAAI,GAAGtB,UAAU,CAACyD,GAAX,CAAevC,MAAf,CAAX;AACAI,IAAAA,IAAI,CAACuE,IAAL,GAAY/F,QAAQ,CAACoB,MAAD,CAApB;;AACA,QAAI4E,MAAM,CAACC,KAAP,CAAazE,IAAI,CAACuE,IAAlB,CAAJ,EAA6B;AAC3B,YAAM,IAAIlG,KAAJ,CAAU,8BAAV,CAAN;AACD;AACF;AAED;;;;;;;;;;AAQA,WAASqF,sBAAT,CAAgCxC,IAAhC,EAAsC;AACpC,WAAQA,IAAI,KAAKA,IAAI,CAACC,QAAL,IAAkBD,IAAI,CAACwD,IAAL,IAAaxD,IAAI,CAACwD,IAAL,CAAUvD,QAA9C,CAAZ;AACD;;AAED,WAAStB,kBAAT,CAA4BD,MAA5B,EAAoC;AAClC,QAAII,IAAI,GAAGtB,UAAU,CAACyD,GAAX,CAAevC,MAAf,CAAX;;AACA,QAAI,CAACI,IAAL,EAAW;AACT2C,MAAAA,QAAQ,CAAC/C,MAAD,CAAR;AACAI,MAAAA,IAAI,GAAGtB,UAAU,CAACyD,GAAX,CAAevC,MAAf,CAAP;AACD;;AACD,WAAOI,IAAP;AACD;AAED;;;;;;;;AAMA,WAASvB,eAAT,CAAyBmB,MAAzB,EAAiC;AAC/B,QAAIqE,KAAK,GAAG9F,KAAK,CAACwG,QAAN,CAAe/E,MAAf,CAAZ;AACA,QAAI,CAACqE,KAAL,EAAY,OAAO,CAAP;AACZ,WAAO,IAAIA,KAAK,CAACzB,MAAN,GAAe,GAA1B;AACD;AACF;;AAED,SAASxD,IAAT,GAAgB,CAAG","sourcesContent":["module.exports = createLayout;\nmodule.exports.simulator = require('ngraph.physics.simulator');\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = require('ngraph.physics.simulator');\n  var physicsSimulator = createSimulator(physicsSettings);\n\n  var nodeMass = defaultNodeMass\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) return true; // TODO: This will never fire 'stable'\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n\n      if (wasStable !== isStableNow) {\n        wasStable = isStableNow;\n        onStableChanged(isStableNow);\n      }\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n      physicsSimulator.invalidateBBox();\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(function(body, bodyId) {\n      cb(body, bodyId);\n    })\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody  = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number')\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n}\n\nfunction noop() { }\n"]},"metadata":{},"sourceType":"script"}