{"ast":null,"code":"var _jsxFileName = \"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/src/Components/UploadImage.jsx\";\nimport React from 'react';\nimport 'filepond/dist/filepond.min.css';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport { withRouter } from 'react-router-dom';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nconst MySwal = withReactContent(Swal);\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview);\nexport default class UploadImage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileImg: ''\n    };\n\n    this.AddPDF = (error, file) => {\n      console.log(file);\n\n      if (this.fileValidate(file)) {\n        // read file\n        //this.readJsonImage(file.file);\n        this.props.sendJsonImage(file);\n        this.setState({\n          fileImg: file\n        });\n      }\n    };\n\n    this.fileValidate = file => {\n      console.log(file.fileExtension);\n      let isValid = true;\n\n      if (file.fileExtension !== 'jpeg' & file.fileExtension !== 'png' & file.fileExtension !== 'jpg') {\n        MySwal.fire({\n          title: 'Error!',\n          text: 'You can only choose png or jpeg files to uploaded',\n          icon: 'error',\n          confirmButtonText: 'Ok'\n        });\n        file.abortLoad();\n        isValid = false;\n      }\n\n      if (isValid) {\n        console.log(file.fileExtension);\n        console.log(file.fileSize);\n      }\n\n      return isValid;\n    };\n\n    this.saveImgToDB = file => {\n      console.log(file.file);\n      const data = new FormData();\n      data.append(\"UploadedFile\", file.file);\n      fetch('http://localhost:44312/api/uploadPic', {\n        method: 'post',\n        contentType: false,\n        processData: false,\n        mode: 'no-cors',\n        body: data\n      }).then(function (data) {\n        console.log(data);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n  }\n\n  getAlert() {\n    alert('child2');\n  }\n\n  getAlert() {\n    alert('clicked');\n  }\n\n  handleInit() {\n    console.log('FilePond instance has initialised', this.pond);\n    let fil = this.pond;\n    console.log(fil);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FilePond, {\n      allowMultiple: false,\n      onaddfile: this.AddPDF,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} //export default withRouter(UploadImage);","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/src/Components/UploadImage.jsx"],"names":["React","FilePond","registerPlugin","withRouter","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","Swal","withReactContent","MySwal","UploadImage","Component","state","fileImg","AddPDF","error","file","console","log","fileValidate","props","sendJsonImage","setState","fileExtension","isValid","fire","title","text","icon","confirmButtonText","abortLoad","fileSize","saveImgToDB","data","FormData","append","fetch","method","contentType","processData","mode","body","then","catch","getAlert","alert","handleInit","pond","fil","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'filepond/dist/filepond.min.css';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport { withRouter } from 'react-router-dom';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\n\nconst MySwal = withReactContent(Swal)\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview);\n\nexport default class UploadImage extends React.Component {\n\n    /*constructor(props) {\n        super(props);\n        this.state = {\n            files: [{\n                source: 'photo.jpeg',\n                options: {\n                    type: 'local'\n                }\n            }]\n        };\n    }\n*/ state = {\n    fileImg: ''\n}\n\n    AddPDF = (error, file) => {\n        console.log(file)\n        if (this.fileValidate(file)) {\n            // read file\n            //this.readJsonImage(file.file);\n            this.props.sendJsonImage(file);\n            this.setState({ fileImg: file })\n        }\n    }\n    getAlert() {\n        alert('child2');\n      }\n    fileValidate = (file) => {\n        console.log(file.fileExtension)\n        let isValid = true;\n        if (file.fileExtension !== 'jpeg' & file.fileExtension !== 'png' & file.fileExtension !== 'jpg') {\n                MySwal.fire({\n                    title: 'Error!',\n                    text: 'You can only choose png or jpeg files to uploaded',\n                    icon: 'error',\n                    confirmButtonText: 'Ok'\n                })\n                file.abortLoad();\n                isValid = false;\n        }\n        if (isValid) {\n            console.log(file.fileExtension);\n            console.log(file.fileSize);\n            \n        }\n        return isValid;\n    }\n\n    getAlert() {\n        alert('clicked');\n      }\n    \n    saveImgToDB = (file) => {\n        console.log(file.file);\n        const data = new FormData();\n        data.append(\"UploadedFile\", file.file);\n        fetch('http://localhost:44312/api/uploadPic', {\n            method: 'post',\n            contentType: false,\n            processData: false,\n            mode: 'no-cors',\n            body: data\n        }).then(function (data) {\n            console.log(data);\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    handleInit() {\n        console.log('FilePond instance has initialised', this.pond);\n        let fil = this.pond;\n        console.log(fil);\n    }\n\n    render() {\n        return (\n            <div>\n                <FilePond allowMultiple={false} onaddfile={this.AddPDF} />\n            </div>\n        )\n    }\n}\n//export default withRouter(UploadImage); \n\n\n\n"]},"metadata":{},"sourceType":"module"}