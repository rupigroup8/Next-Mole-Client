{"ast":null,"code":"/**\n * Performs 3d forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0,\n      tx = 0,\n      dy = 0,\n      ty = 0,\n      dz = 0,\n      tz = 0,\n      i,\n      max = bodies.length;\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    body.velocity.z += coeff * body.force.z;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        vz = body.velocity.z,\n        v = Math.sqrt(vx * vx + vy * vy + vz * vz);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n      body.velocity.z = vz / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n    dz = timeStep * body.velocity.z;\n    body.pos.x += dx;\n    body.pos.y += dy;\n    body.pos.z += dz;\n    tx += Math.abs(dx);\n    ty += Math.abs(dy);\n    tz += Math.abs(dz);\n  }\n\n  return (tx * tx + ty * ty + tz * tz) / bodies.length;\n}","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.forcelayout3d/lib/eulerIntegrator.js"],"names":["module","exports","integrate","bodies","timeStep","dx","tx","dy","ty","dz","tz","i","max","length","body","coeff","mass","velocity","x","force","y","z","vx","vy","vz","v","Math","sqrt","pos","abs"],"mappings":"AAAA;;;;;;AAOAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AACnC,MAAIC,EAAE,GAAG,CAAT;AAAA,MAAYC,EAAE,GAAG,CAAjB;AAAA,MACIC,EAAE,GAAG,CADT;AAAA,MACYC,EAAE,GAAG,CADjB;AAAA,MAEIC,EAAE,GAAG,CAFT;AAAA,MAEYC,EAAE,GAAG,CAFjB;AAAA,MAGIC,CAHJ;AAAA,MAIIC,GAAG,GAAGT,MAAM,CAACU,MAJjB;;AAMA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,GAAhB,EAAqB,EAAED,CAAvB,EAA0B;AACxB,QAAIG,IAAI,GAAGX,MAAM,CAACQ,CAAD,CAAjB;AAAA,QACII,KAAK,GAAGX,QAAQ,GAAGU,IAAI,CAACE,IAD5B;AAGAF,IAAAA,IAAI,CAACG,QAAL,CAAcC,CAAd,IAAmBH,KAAK,GAAGD,IAAI,CAACK,KAAL,CAAWD,CAAtC;AACAJ,IAAAA,IAAI,CAACG,QAAL,CAAcG,CAAd,IAAmBL,KAAK,GAAGD,IAAI,CAACK,KAAL,CAAWC,CAAtC;AACAN,IAAAA,IAAI,CAACG,QAAL,CAAcI,CAAd,IAAmBN,KAAK,GAAGD,IAAI,CAACK,KAAL,CAAWE,CAAtC;AAEA,QAAIC,EAAE,GAAGR,IAAI,CAACG,QAAL,CAAcC,CAAvB;AAAA,QACIK,EAAE,GAAGT,IAAI,CAACG,QAAL,CAAcG,CADvB;AAAA,QAEII,EAAE,GAAGV,IAAI,CAACG,QAAL,CAAcI,CAFvB;AAAA,QAGII,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUL,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAf,GAAoBC,EAAE,GAAGA,EAAnC,CAHR;;AAKA,QAAIC,CAAC,GAAG,CAAR,EAAW;AACTX,MAAAA,IAAI,CAACG,QAAL,CAAcC,CAAd,GAAkBI,EAAE,GAAGG,CAAvB;AACAX,MAAAA,IAAI,CAACG,QAAL,CAAcG,CAAd,GAAkBG,EAAE,GAAGE,CAAvB;AACAX,MAAAA,IAAI,CAACG,QAAL,CAAcI,CAAd,GAAkBG,EAAE,GAAGC,CAAvB;AACD;;AAEDpB,IAAAA,EAAE,GAAGD,QAAQ,GAAGU,IAAI,CAACG,QAAL,CAAcC,CAA9B;AACAX,IAAAA,EAAE,GAAGH,QAAQ,GAAGU,IAAI,CAACG,QAAL,CAAcG,CAA9B;AACAX,IAAAA,EAAE,GAAGL,QAAQ,GAAGU,IAAI,CAACG,QAAL,CAAcI,CAA9B;AAEAP,IAAAA,IAAI,CAACc,GAAL,CAASV,CAAT,IAAcb,EAAd;AACAS,IAAAA,IAAI,CAACc,GAAL,CAASR,CAAT,IAAcb,EAAd;AACAO,IAAAA,IAAI,CAACc,GAAL,CAASP,CAAT,IAAcZ,EAAd;AAEAH,IAAAA,EAAE,IAAIoB,IAAI,CAACG,GAAL,CAASxB,EAAT,CAAN;AAAoBG,IAAAA,EAAE,IAAIkB,IAAI,CAACG,GAAL,CAAStB,EAAT,CAAN;AAAoBG,IAAAA,EAAE,IAAIgB,IAAI,CAACG,GAAL,CAASpB,EAAT,CAAN;AACzC;;AAED,SAAO,CAACH,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAf,GAAoBE,EAAE,GAAGA,EAA1B,IAA8BP,MAAM,CAACU,MAA5C;AACD","sourcesContent":["/**\n * Performs 3d forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0, tx = 0,\n      dy = 0, ty = 0,\n      dz = 0, tz = 0,\n      i,\n      max = bodies.length;\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    body.velocity.z += coeff * body.force.z;\n\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        vz = body.velocity.z,\n        v = Math.sqrt(vx * vx + vy * vy + vz * vz);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n      body.velocity.z = vz / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n    dz = timeStep * body.velocity.z;\n\n    body.pos.x += dx;\n    body.pos.y += dy;\n    body.pos.z += dz;\n\n    tx += Math.abs(dx); ty += Math.abs(dy); tz += Math.abs(dz);\n  }\n\n  return (tx * tx + ty * ty + tz * tz)/bodies.length;\n}\n"]},"metadata":{},"sourceType":"script"}