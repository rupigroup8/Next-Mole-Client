{"ast":null,"code":"var _jsxFileName = \"/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/src/Components/Graph.jsx\";\nimport React, { Component } from 'react'; //import Data from \"../gotData.json\";\n\nimport { Button, Container, Row, Col } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { ForceGraph3D } from 'react-force-graph';\nimport FoundDataInFile from './FoundDataInFile';\nimport gotData from '../gotData.json'; //import { easeLinear } from 'd3';\n//var finalJson = { nodes: [], links: [] };\n\nvar finalJsonNetwork = {\n  nodes: [],\n  links: []\n};\nvar removedLinksTmp = []; // save the connections that removed\n\nvar arrConnections = [];\nvar arrKeysAndRadio = [];\nvar dataFromLocal = [];\nvar rawData = []; //const isImageUrl = require('is-image-url');\n\nconst isImage = require('is-image');\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props); //let local = false;\n\n    this.postJsonToDB = file => {\n      // save nodes and links to DB\n      const nodesList = file.nodes.map(item => {\n        const {\n          image,\n          index,\n          vx,\n          vy,\n          vz,\n          x,\n          y,\n          z,\n          color,\n          __threeObj,\n          ...withoutGraphParams\n        } = item; //  remove all graph parameters like vx, vy.....\n\n        let str = JSON.stringify(withoutGraphParams);\n        let strW = str.replace(/'/g, \"\").replace(/\"|{|}/g, \"\");\n        let id = item.id;\n        let idW = id.replace(/'/g, \"\");\n        var singleNode = {\n          NodeNum: idW,\n          NodeImageURL: item.nodeImage,\n          NodeDescription: strW\n        };\n        return singleNode;\n      });\n      const nodesListAll = this.state.allNodes.map(item => {\n        const {\n          image,\n          index,\n          vx,\n          vy,\n          vz,\n          x,\n          y,\n          z,\n          color,\n          __threeObj,\n          ...withoutGraphParams\n        } = item; //  remove all graph parameters like vx, vy.....\n\n        let str = JSON.stringify(withoutGraphParams);\n        let strW = str.replace(/'/g, \"\").replace(/\"|{|}/g, \"\");\n        let id = item.id;\n        let idW = id.replace(/'/g, \"\");\n        var singleNode = {\n          NodeNum: idW,\n          NodeImageURL: item.nodeImage,\n          NodeDescription: strW\n        };\n        return singleNode;\n      });\n      const linksList = file.links.map(item => {\n        let sour = item.source.id;\n        let sourW = sour.replace(/'/g, \"\");\n        let targ = item.target.id;\n        let targW = targ.replace(/'/g, \"\");\n        var singleLink = {\n          SourceNode: sourW,\n          TargetNode: targW,\n          ConnectionType: item.connectionType,\n          ConnectionWeight: 1\n        };\n        return singleLink;\n      });\n      console.log(linksList);\n      console.log(this.props.location.state.jsonDetails);\n      let str = this.props.location.state.jsonDetails.subject;\n      console.log(str);\n      var tableName = str.replace(/ /g, \"_\");\n      console.log(tableName);\n      fetch(this.apiUrl + 'nodes/' + tableName, {\n        //POST nodes with links\n        method: 'POST',\n        body: JSON.stringify(nodesList),\n        //mode: 'no-cors',\n        headers: new Headers({\n          'Content-type': 'application/json; charset=UTF-8'\n        })\n      }).then(res => {\n        console.log('res=', res);\n        return res.json();\n      }).then(result => {\n        console.log(\"fetch POST= \", result);\n      }, error => {\n        console.log(\"err post=\", error);\n      });\n      fetch(this.apiUrl + 'nodesSaveAll/' + tableName, {\n        //POST nodes with / without links\n        method: 'POST',\n        body: JSON.stringify(nodesListAll),\n        //mode: 'no-cors',\n        headers: new Headers({\n          'Content-type': 'application/json; charset=UTF-8'\n        })\n      }).then(res => {\n        console.log('res=', res);\n        return res.json();\n      }).then(result => {\n        console.log(\"fetch POST= \", result);\n      }, error => {\n        console.log(\"err post=\", error);\n      });\n      fetch(this.apiUrl + 'links/' + tableName, {\n        //POST links\n        method: 'POST',\n        body: JSON.stringify(linksList),\n        headers: new Headers({\n          'Content-type': 'application/json; charset=UTF-8'\n        })\n      }).then(res => {\n        console.log('res=', res);\n        return res.json();\n      }).then(result => {\n        console.log(\"fetch POST= \", result);\n      }, error => {\n        console.log(\"err post=\", error);\n      });\n    };\n\n    this.RemoveAllConnections = btnState => {\n      console.log(btnState);\n      removedLinksTmp = this.state.removedLinks;\n      console.log(finalJsonNetwork.links);\n\n      if (btnState === 'allUnchacked') {\n        finalJsonNetwork.links.map(i => removedLinksTmp.push(i));\n        finalJsonNetwork.links.splice(0);\n        console.log('links remain: ', finalJsonNetwork.links);\n        console.log('removed ', removedLinksTmp);\n        arrConnections.map(o => {\n          o.isChecked = false;\n        });\n      } else {\n        removedLinksTmp.map(i => finalJsonNetwork.links.push(i));\n        removedLinksTmp.splice(0);\n        console.log('links remain: ', finalJsonNetwork.links);\n        console.log('removed ', removedLinksTmp);\n        arrConnections.map(o => {\n          o.isChecked = true;\n        });\n      }\n\n      this.setState({\n        connectionsAll: arrConnections,\n        finalJson: finalJsonNetwork,\n        removedLinks: removedLinksTmp\n      });\n    };\n\n    this.RemoveConnection = x => {\n      // add / remove connection type   \n      removedLinksTmp = this.state.removedLinks;\n      console.log(removedLinksTmp, finalJsonNetwork);\n\n      if (!x.target.checked) {\n        //  if connection removed        \n        let pos = arrConnections.map(function (e) {\n          return e.name;\n        }).indexOf(x.target.value);\n        arrConnections[pos].isChecked = false;\n        this.setState({\n          connectionsAll: arrConnections\n        });\n        remove();\n\n        function remove() {\n          for (let j in finalJsonNetwork.links) {\n            if (finalJsonNetwork.links[j].connectionType === x.target.value) {\n              removedLinksTmp.push(finalJsonNetwork.links[j]);\n              finalJsonNetwork.links.splice(j, 1);\n            }\n          }\n\n          let count = 0;\n\n          for (let k in finalJsonNetwork.links) {\n            if (finalJsonNetwork.links[k].connectionType === x.target.value) {\n              count++;\n            }\n\n            ;\n\n            if (count > 0) {\n              remove();\n            }\n          }\n        }\n      } else {\n        let pos = arrConnections.map(function (e) {\n          return e.name;\n        }).indexOf(x.target.value);\n        arrConnections[pos].isChecked = true;\n        this.setState({\n          connectionsAll: arrConnections\n        });\n        funclear();\n\n        function funclear() {\n          for (let k in removedLinksTmp) {\n            if (removedLinksTmp[k].connectionType === x.target.value) {\n              finalJsonNetwork.links.push(removedLinksTmp[k]);\n              removedLinksTmp.splice(k, 1);\n            }\n          }\n\n          let temp = 0;\n\n          for (let l in removedLinksTmp) {\n            if (removedLinksTmp[l].connectionType === x.target.value) {\n              temp++;\n            }\n\n            ;\n\n            if (temp > 0) {\n              funclear();\n            }\n          }\n        }\n      }\n\n      console.log(\"removed: \", removedLinksTmp);\n      console.log('finaljson: ', finalJsonNetwork);\n      console.log(this.state.connectionsAll);\n      this.setState({\n        finalJson: finalJsonNetwork,\n        removedLinks: removedLinksTmp\n      }); //this.forceUpdate();\n    };\n\n    this.getKeys = rawArr => {\n      let totalObj = rawArr.length; // total amount of object in original array\n\n      let arrAllKeys = []; // all keys including duplicates\n\n      Object.keys(rawArr).forEach(function (k) {\n        const values = Object.keys(rawArr[k]);\n        values.map(i => {\n          arrAllKeys.push(i);\n        });\n      });\n      let arrDistinctKeys = Array.from(new Set(arrAllKeys)); // remove duplicates\n\n      var keysAndValues = this.countKeyRatio(arrDistinctKeys, arrAllKeys, totalObj); // get ratio for key\n\n      return keysAndValues;\n    };\n\n    this.countKeyRatio = (arrDistinct, arrAll, totalObjCount) => {\n      const arrKeysAndRadio2 = [];\n      arrDistinct.map(i => {\n        var search = i;\n        var countKey = arrAll.reduce(function (n, val) {\n          // counts total amount of key appearence in the array\n          return n + (val === search);\n        }, 0);\n        let objValuesTmp = this.addValues(i);\n        let objValues = Array.from(new Set(objValuesTmp)); // remove duplicates values\n\n        let keyRatio = parseFloat((objValues.length / totalObjCount).toFixed(3));\n        let obj = {\n          k: i,\n          v: objValues,\n          amount: countKey,\n          ratio: keyRatio\n        };\n        arrKeysAndRadio2.push(obj);\n      });\n      arrKeysAndRadio2.sort(function (a, b) {\n        //    sort keys by ratio\n        return b.ratio - a.ratio;\n      });\n      return arrKeysAndRadio2;\n    };\n\n    this.addValues = index => {\n      // get all values for key \n      var val = [];\n      var arrTmp = rawData;\n\n      for (let g in arrTmp) {\n        if (arrTmp[g][index]) {\n          //אם בכלל קיים שדה כזה\n          let type = typeof arrTmp[g][index];\n\n          if (type === 'object') {\n            arrTmp[g][index].map(item => {\n              val.push(item);\n            });\n          } else {\n            val.push(arrTmp[g][index]);\n          }\n        }\n      }\n\n      return val;\n    };\n\n    this.getId = arrOfKeys => {\n      let isId = false;\n      var arrOfKeysTmp = arrOfKeys;\n      var maxRatioObj = arrOfKeysTmp.reduce((prev, current) => prev.ratio > current.ratio ? prev : current); // get the object with maximun ratio\n\n      var maxRatioIndex = arrOfKeys.findIndex(o => o.ratio === maxRatioObj.ratio); // find the object index \n\n      let potentialId = maxRatioObj.k; // potential key to be id\n\n      let total = 0;\n      var arrOfKeysTmpCopy = arrOfKeysTmp;\n      var arrCon = [];\n      maxRatioObj.v.map(itemToSearch => {\n        var totalObjConnection = 0;\n        arrOfKeysTmpCopy.map(searchInto => {\n          if (searchInto.k !== potentialId) {\n            // sreach in all other keys beside the potential\n            var count = this.countAppearence(itemToSearch, searchInto.v);\n\n            if (count !== 0) {\n              arrCon.push(searchInto.k); // build array of connection types, tmp\n            }\n\n            totalObjConnection += count;\n            total += count;\n          }\n        });\n\n        if (totalObjConnection === 0) {//console.log(itemToSearch,' has no connections')\n        } else {//console.log(itemToSearch, 'has ',totalObjConnection,' connections')\n          }\n      });\n\n      if (total > maxRatioObj.v.length) {\n        isId = true;\n        console.log(potentialId + ' is the key that found uniqe');\n      }\n\n      arrConnections = this.getConnections(arrCon);\n      this.setState({\n        connectionsAll: arrConnections\n      });\n      return potentialId;\n    };\n\n    this.countAppearence = (item, arr) => {\n      var count = arr.reduce(function (n, val) {\n        return n + (val === item);\n      }, 0);\n      return count;\n    };\n\n    this.getConnections = arr => {\n      var arrConnectionType2 = [];\n      var tmpArrConnectionType2 = Array.from(new Set(arr)); // remove duplicate connections\n\n      for (let i = 0; i < tmpArrConnectionType2.length; i++) {\n        // create array of key value pair\n        //let count= this.countAppearence(tmpArrConnectionType2[i],arr)\n        let obj = {\n          name: tmpArrConnectionType2[i],\n          conAmount: 0,\n          isChecked: true\n        };\n        arrConnectionType2.push(obj);\n      }\n\n      console.log(arrConnectionType2);\n      return arrConnectionType2;\n    };\n\n    this.getNodes = (arr, id) => {\n      var nodesToAdd = [];\n\n      for (let item in arr) {\n        let newNode = arr[item]; //create new node\n\n        newNode.id = arr[item][id];\n        newNode.nodeImage = '';\n\n        for (let key in arr[item]) {\n          // look for an image URL in the object\n          if (typeof arr[item][key] === 'object') {\n            for (let k in arr[item][key]) {\n              var isImageString = isImage(arr[item][key][k]);\n\n              if (isImageString) {\n                newNode.nodeImage = arr[item][key][k];\n                break;\n              }\n            }\n          } else if (typeof arr[item][key] === 'string') {\n            var isImageString = isImage(arr[item][key]);\n\n            if (isImageString) {\n              newNode.nodeImage = arr[item][key];\n              break;\n            }\n          } else {\n            console.log(typeof arr[item][key]);\n            break;\n          }\n        }\n\n        nodesToAdd.push(newNode);\n      }\n\n      finalJsonNetwork.nodes = nodesToAdd;\n      console.log(finalJsonNetwork.nodes);\n      this.setState({\n        finalJson: finalJsonNetwork\n      }, () => {\n        this.getLinks(rawData, id, arrConnections);\n      });\n    };\n\n    this.getLinks = (arr, id, arrConnections) => {\n      console.log('inside get links');\n      console.log(this.state.finalJson);\n      var linksToAdd = [];\n      var tmpArr = arr; // search links in the original array, every loop we dismiss the current\n\n      for (let item in tmpArr) {\n        var searchedItem = tmpArr[item][id];\n        let itemToAddBack = tmpArr[item];\n        var withoutCorrent = tmpArr;\n        withoutCorrent.splice(item, 1); // dismiss the current\n\n        for (let i in withoutCorrent) {\n          for (let key in withoutCorrent[i]) {\n            if (key !== id && key !== 'id') {\n              // search all keys bedise 'id', beacuse it key we added\n              if (typeof withoutCorrent[i][key] === 'object') {\n                for (let j = 0; j < withoutCorrent[i][key].length; j++) {\n                  if (searchedItem === withoutCorrent[i][key][j]) {\n                    let newLink = {\n                      target: withoutCorrent[i][id],\n                      source: searchedItem,\n                      connectionType: key\n                    };\n                    linksToAdd.push(newLink); //create new link                                 \n                  }\n                }\n              } else {\n                if (searchedItem === withoutCorrent[i][key]) {\n                  let newLink = {\n                    source: withoutCorrent[i][id],\n                    target: searchedItem,\n                    connectionType: key\n                  };\n                  linksToAdd.push(newLink);\n                }\n              }\n            }\n          }\n        }\n\n        withoutCorrent.splice(item, 0, itemToAddBack); // return back the current\n\n        tmpArr = withoutCorrent;\n      } //  remove duplicate links\n\n\n      var linksTmp = linksToAdd.filter((ele, ind) => ind === linksToAdd.findIndex(elem => elem.source === ele.source && elem.target === ele.target)); //  remove nodes without links\n\n      var originalArray2 = this.state.finalJson.nodes;\n      var nodesWithLinks = [];\n      var nodesWithoutLinks = [];\n      var cnt = 0;\n      var cntWithout = 0;\n      var originalArray = Array.from(new Set(originalArray2));\n      console.log(originalArray);\n\n      for (let arr in originalArray) {\n        var hasLink = false;\n\n        for (let filter in linksTmp) {\n          if (originalArray[arr].id === linksTmp[filter].target || originalArray[arr].id === linksTmp[filter].source) {\n            hasLink = true;\n          }\n        }\n\n        if (hasLink) {\n          cnt++;\n          nodesWithLinks.push(originalArray[arr]);\n        } else {\n          cntWithout++;\n          nodesWithoutLinks.push(originalArray[arr]);\n        }\n      } // remove duplicates\n\n\n      nodesWithLinks = nodesWithLinks.filter((ele, ind) => ind === nodesWithLinks.findIndex(elem => elem.id === ele.id && elem.id === ele.id));\n      nodesWithoutLinks = nodesWithoutLinks.filter((ele, ind) => ind === nodesWithoutLinks.findIndex(elem => elem.id === ele.id && elem.id === ele.id));\n      originalArray = originalArray.filter((ele, ind) => ind === originalArray.findIndex(elem => elem.id === ele.id && elem.id === ele.id));\n      console.log('with', cnt);\n      console.log('without', cntWithout);\n      console.log('original ', originalArray);\n      console.log('nodesWithLinks ', nodesWithLinks);\n      console.log('nodesWithoutLinks ', nodesWithoutLinks); //count total connection type amount\n\n      linksTmp.map(i => {\n        let pos = arrConnections.map(function (e) {\n          return e.name;\n        }).indexOf(i.connectionType);\n        let count = arrConnections[pos].conAmount;\n        count++;\n        arrConnections[pos].conAmount = count;\n      });\n      arrConnections.sort(function (a, b) {\n        //    sort connection types by amount of appearence\n        return b.conAmount - a.conAmount;\n      });\n      finalJsonNetwork.links = linksTmp;\n      finalJsonNetwork.nodes = nodesWithLinks;\n      console.log(finalJsonNetwork);\n      console.log(arrConnections); //this.forceUpdate();\n\n      this.setState({\n        finalJson: finalJsonNetwork,\n        connectionsAll: arrConnections,\n        allNodes: originalArray\n      });\n    };\n\n    this.goToGame = () => {\n      console.log(\"inside game\");\n      var dataToPass = this.state.finalJson; //var nodesData = this.state.allNodes;\n\n      this.props.history.push({\n        pathname: '/game',\n        state: {\n          finalJson: dataToPass\n        }\n      });\n    };\n\n    let local = true;\n    this.apiUrl = 'https://localhost:44312/api/';\n\n    if (!local) {\n      this.apiUrl = 'http://proj.ruppin.ac.il/igroup8/prod/api/';\n    }\n\n    this.state = {\n      //dataBefore: this.props.location.state.jsonDetails.rawData,\n      finalJson: {\n        nodes: [],\n        links: []\n      },\n      removedLinks: [],\n      // save the connections that removed\n      connectionsAll: [],\n      allNodes: []\n    };\n  }\n\n  componentDidMount() {\n    arrKeysAndRadio = this.getKeys(rawData);\n    console.log(arrKeysAndRadio);\n    var id = this.getId(arrKeysAndRadio);\n\n    if (id !== '') {\n      this.getNodes(rawData, id); //this.getLinks(rawData, id, arrConnections);\n    }\n  }\n\n  render() {\n    if (localStorage.getItem('jsonRowData')) {\n      rawData = JSON.parse(localStorage.getItem('jsonRowData'));\n    } else {\n      rawData = this.props.location.state.jsonDetails.rawData;\n    }\n\n    if (localStorage.getItem('jsonDetails')) {\n      dataFromLocal = JSON.parse(localStorage.getItem('jsonDetails'));\n    } else {\n      dataFromLocal = this.props.location.state.jsonDetails.rawData;\n    } //rawData= this.props.location.state.jsonDetails.rawData;\n\n\n    console.log('render', this.state.finalJson);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FoundDataInFile, {\n      removeAll: this.RemoveAllConnections,\n      passedFunction: this.RemoveConnection,\n      data: arrKeysAndRadio,\n      details: dataFromLocal,\n      connections: arrConnections,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        padding: '1.175rem 0.75rem',\n        fontSize: '1.1rem',\n        marginBottom: '2rem'\n      },\n      variant: \"btn btn-info \",\n      onClick: () => this.postJsonToDB(finalJsonNetwork),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 29\n      }\n    }, \"Save network to DB\"))), /*#__PURE__*/React.createElement(Row, {\n      className: \"overflow-hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ForceGraph3D, {\n      graphData: this.state.finalJson,\n      nodeLabel: \"id\",\n      linkLabel: \"connectionType\",\n      nodeAutoColorBy: \"id\",\n      nodeRelSize: 8,\n      linkThreeObjectExtend: true,\n      showNavInfo: false,\n      backgroundColor: \"rgb(164, 184, 204)\",\n      linkWidth: 2,\n      refresh: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default withRouter(Graph);","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/src/Components/Graph.jsx"],"names":["React","Component","Button","Container","Row","Col","withRouter","ForceGraph3D","FoundDataInFile","gotData","finalJsonNetwork","nodes","links","removedLinksTmp","arrConnections","arrKeysAndRadio","dataFromLocal","rawData","isImage","require","Graph","constructor","props","postJsonToDB","file","nodesList","map","item","image","index","vx","vy","vz","x","y","z","color","__threeObj","withoutGraphParams","str","JSON","stringify","strW","replace","id","idW","singleNode","NodeNum","NodeImageURL","nodeImage","NodeDescription","nodesListAll","state","allNodes","linksList","sour","source","sourW","targ","target","targW","singleLink","SourceNode","TargetNode","ConnectionType","connectionType","ConnectionWeight","console","log","location","jsonDetails","subject","tableName","fetch","apiUrl","method","body","headers","Headers","then","res","json","result","error","RemoveAllConnections","btnState","removedLinks","i","push","splice","o","isChecked","setState","connectionsAll","finalJson","RemoveConnection","checked","pos","e","name","indexOf","value","remove","j","count","k","funclear","temp","l","getKeys","rawArr","totalObj","length","arrAllKeys","Object","keys","forEach","values","arrDistinctKeys","Array","from","Set","keysAndValues","countKeyRatio","arrDistinct","arrAll","totalObjCount","arrKeysAndRadio2","search","countKey","reduce","n","val","objValuesTmp","addValues","objValues","keyRatio","parseFloat","toFixed","obj","v","amount","ratio","sort","a","b","arrTmp","g","type","getId","arrOfKeys","isId","arrOfKeysTmp","maxRatioObj","prev","current","maxRatioIndex","findIndex","potentialId","total","arrOfKeysTmpCopy","arrCon","itemToSearch","totalObjConnection","searchInto","countAppearence","getConnections","arr","arrConnectionType2","tmpArrConnectionType2","conAmount","getNodes","nodesToAdd","newNode","key","isImageString","getLinks","linksToAdd","tmpArr","searchedItem","itemToAddBack","withoutCorrent","newLink","linksTmp","filter","ele","ind","elem","originalArray2","nodesWithLinks","nodesWithoutLinks","cnt","cntWithout","originalArray","hasLink","goToGame","dataToPass","history","pathname","local","componentDidMount","render","localStorage","getItem","parse","padding","fontSize","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import Data from \"../gotData.json\";\nimport { Button, Container, Row, Col } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { ForceGraph3D } from 'react-force-graph';\nimport FoundDataInFile from './FoundDataInFile';\nimport gotData from '../gotData.json'\n//import { easeLinear } from 'd3';\n\n\n//var finalJson = { nodes: [], links: [] };\nvar finalJsonNetwork = { nodes: [], links: [] }\nvar removedLinksTmp = [];      // save the connections that removed\nvar arrConnections = [];\nvar arrKeysAndRadio = [];\nvar dataFromLocal = [];\nvar rawData = [];\n//const isImageUrl = require('is-image-url');\nconst isImage = require('is-image');\nclass Graph extends Component {\n    constructor(props) {\n        super(props)\n        //let local = false;\n        let local = true;\n        this.apiUrl = 'https://localhost:44312/api/';\n        if (!local) {\n            this.apiUrl = 'http://proj.ruppin.ac.il/igroup8/prod/api/';\n        }\n        this.state = {\n            //dataBefore: this.props.location.state.jsonDetails.rawData,\n            finalJson: { nodes: [], links: [] },\n            removedLinks: [],       // save the connections that removed\n            connectionsAll: [],\n            allNodes: []\n\n        }\n    }\n\n    postJsonToDB = (file) => {                              // save nodes and links to DB\n        const nodesList = file.nodes.map(item => {\n            const { image, index, vx, vy, vz, x, y, z, color, __threeObj, ...withoutGraphParams } = item;         //  remove all graph parameters like vx, vy.....\n            let str = JSON.stringify(withoutGraphParams)\n            let strW = str.replace(/'/g, \"\").replace(/\"|{|}/g, \"\");\n            let id = item.id;\n            let idW = id.replace(/'/g, \"\");\n            var singleNode = {\n                NodeNum: idW,\n                NodeImageURL: item.nodeImage,\n                NodeDescription: strW\n            }\n            return singleNode;\n        })\n\n        const nodesListAll = this.state.allNodes.map(item => {\n            const { image, index, vx, vy, vz, x, y, z, color, __threeObj, ...withoutGraphParams } = item;         //  remove all graph parameters like vx, vy.....\n            let str = JSON.stringify(withoutGraphParams)\n            let strW = str.replace(/'/g, \"\").replace(/\"|{|}/g, \"\");\n            let id = item.id;\n            let idW = id.replace(/'/g, \"\");\n            var singleNode = {\n                NodeNum: idW,\n                NodeImageURL: item.nodeImage,\n                NodeDescription: strW\n            }\n            return singleNode;\n        })\n\n        const linksList = file.links.map(item => {\n            let sour = item.source.id;\n            let sourW = sour.replace(/'/g, \"\");\n            let targ = item.target.id;\n            let targW = targ.replace(/'/g, \"\");\n            var singleLink = {\n                SourceNode: sourW,\n                TargetNode: targW,\n                ConnectionType: item.connectionType,\n                ConnectionWeight: 1\n\n            }\n            return singleLink;\n        })\n\n        console.log(linksList);\n        console.log(this.props.location.state.jsonDetails);\n        let str = this.props.location.state.jsonDetails.subject;\n        console.log(str)\n        var tableName = str.replace(/ /g, \"_\");\n        console.log(tableName)\n\n\n        fetch(this.apiUrl + 'nodes/' + tableName, {        //POST nodes with links\n            method: 'POST',\n            body: JSON.stringify(nodesList),\n            //mode: 'no-cors',\n            headers: new Headers({\n                'Content-type': 'application/json; charset=UTF-8'\n            })\n        })\n            .then(res => {\n                console.log('res=', res);\n                return res.json()\n            })\n            .then(\n                (result) => {\n                    console.log(\"fetch POST= \", result);\n                },\n                (error) => {\n                    console.log(\"err post=\", error);\n                });\n\n\n        fetch(this.apiUrl + 'nodesSaveAll/' + tableName, {        //POST nodes with / without links\n            method: 'POST',\n            body: JSON.stringify(nodesListAll),\n            //mode: 'no-cors',\n            headers: new Headers({\n                'Content-type': 'application/json; charset=UTF-8'\n            })\n        })\n            .then(res => {\n                console.log('res=', res);\n                return res.json()\n            })\n            .then(\n                (result) => {\n                    console.log(\"fetch POST= \", result);\n                },\n                (error) => {\n                    console.log(\"err post=\", error);\n                });\n        fetch(this.apiUrl + 'links/' + tableName, {              //POST links\n            method: 'POST',\n            body: JSON.stringify(linksList),\n            headers: new Headers({\n                'Content-type': 'application/json; charset=UTF-8'\n            })\n        })\n            .then(res => {\n                console.log('res=', res);\n                return res.json()\n            })\n            .then(\n                (result) => {\n                    console.log(\"fetch POST= \", result);\n                },\n                (error) => {\n                    console.log(\"err post=\", error);\n                });\n    }\n\n    RemoveAllConnections = (btnState) => {\n        console.log(btnState)\n        removedLinksTmp = this.state.removedLinks;\n        console.log(finalJsonNetwork.links)\n        if (btnState === 'allUnchacked') {\n            finalJsonNetwork.links.map(i => removedLinksTmp.push(i))\n            finalJsonNetwork.links.splice(0);\n\n            console.log('links remain: ', finalJsonNetwork.links)\n            console.log('removed ', removedLinksTmp);\n            arrConnections.map(o => {\n                o.isChecked = false\n            })\n        }\n        else {\n            removedLinksTmp.map(i => finalJsonNetwork.links.push(i))\n            removedLinksTmp.splice(0);\n            console.log('links remain: ', finalJsonNetwork.links)\n            console.log('removed ', removedLinksTmp);\n            arrConnections.map(o => {\n                o.isChecked = true\n            })\n        }\n\n        this.setState({\n            connectionsAll: arrConnections,\n            finalJson: finalJsonNetwork,\n            removedLinks: removedLinksTmp,\n        })\n    }\n\n    RemoveConnection = (x) => {             // add / remove connection type   \n        removedLinksTmp = this.state.removedLinks;\n        console.log(removedLinksTmp, finalJsonNetwork)\n        if (!x.target.checked) {         //  if connection removed        \n            let pos = arrConnections.map(function (e) { return e.name; }).indexOf(x.target.value);\n            arrConnections[pos].isChecked = false;\n            this.setState({ connectionsAll: arrConnections })\n            remove();\n\n            function remove() {\n                for (let j in finalJsonNetwork.links) {\n                    if (finalJsonNetwork.links[j].connectionType === x.target.value) {\n                        removedLinksTmp.push(finalJsonNetwork.links[j]);\n                        finalJsonNetwork.links.splice(j, 1);\n                    }\n                }\n                let count = 0;\n                for (let k in finalJsonNetwork.links) {\n                    if (finalJsonNetwork.links[k].connectionType === x.target.value) {\n                        count++\n                    };\n                    if (count > 0) {\n                        remove();\n                    }\n                }\n            }\n        }\n        else {\n            let pos = arrConnections.map(function (e) { return e.name; }).indexOf(x.target.value);\n            arrConnections[pos].isChecked = true;\n            this.setState({ connectionsAll: arrConnections })\n            funclear();\n            function funclear() {\n                for (let k in removedLinksTmp) {\n                    if (removedLinksTmp[k].connectionType === x.target.value) {\n                        finalJsonNetwork.links.push(removedLinksTmp[k]);\n                        removedLinksTmp.splice(k, 1);\n                    }\n                }\n                let temp = 0;\n                for (let l in removedLinksTmp) {\n                    if (removedLinksTmp[l].connectionType === x.target.value) {\n                        temp++;\n                    };\n                    if (temp > 0) {\n                        funclear();\n                    }\n                }\n            }\n        }\n        console.log(\"removed: \", removedLinksTmp);\n        console.log('finaljson: ', finalJsonNetwork)\n        console.log(this.state.connectionsAll)\n        this.setState({\n            finalJson: finalJsonNetwork,\n            removedLinks: removedLinksTmp\n        });\n        //this.forceUpdate();\n\n    }\n\n    componentDidMount() {\n        arrKeysAndRadio = this.getKeys(rawData)\n        console.log(arrKeysAndRadio)\n        var id = this.getId(arrKeysAndRadio);\n        if (id !== '') {\n            this.getNodes(rawData, id);\n            //this.getLinks(rawData, id, arrConnections);\n        }\n    }\n\n    getKeys = (rawArr) => {\n        let totalObj = rawArr.length;                 // total amount of object in original array\n        let arrAllKeys = [];                      // all keys including duplicates\n        Object.keys(rawArr).forEach(function (k) {\n            const values = Object.keys(rawArr[k])\n            values.map((i) => {\n                arrAllKeys.push(i)\n            });\n        });\n        let arrDistinctKeys = Array.from(new Set(arrAllKeys));       // remove duplicates\n        var keysAndValues = this.countKeyRatio(arrDistinctKeys, arrAllKeys, totalObj)             // get ratio for key\n        return keysAndValues\n    }\n\n    countKeyRatio = (arrDistinct, arrAll, totalObjCount) => {\n        const arrKeysAndRadio2 = [];\n        arrDistinct.map((i) => {\n            var search = i;\n            var countKey = arrAll.reduce(function (n, val) {        // counts total amount of key appearence in the array\n                return n + (val === search);\n            }, 0);\n            let objValuesTmp = this.addValues(i);\n            let objValues = Array.from(new Set(objValuesTmp));      // remove duplicates values\n            let keyRatio = parseFloat((objValues.length / totalObjCount).toFixed(3));\n            let obj = {\n                k: i, v: objValues, amount: countKey, ratio: keyRatio\n            }\n            arrKeysAndRadio2.push(obj)\n\n        });\n        arrKeysAndRadio2.sort(function (a, b) {           //    sort keys by ratio\n            return b.ratio - a.ratio;\n        });\n        return arrKeysAndRadio2\n    }\n\n    addValues = (index) => {          // get all values for key \n        var val = [];\n        var arrTmp = rawData;\n        for (let g in arrTmp) {\n            if (arrTmp[g][index]) {                     //אם בכלל קיים שדה כזה\n                let type = typeof (arrTmp[g][index])\n                if (type === 'object') {\n                    arrTmp[g][index].map(item => {\n                        val.push(item)\n                    })\n                }\n                else {\n                    val.push(arrTmp[g][index])\n                }\n            }\n        }\n        return val;\n    }\n\n    getId = (arrOfKeys) => {\n        let isId = false;\n        var arrOfKeysTmp = arrOfKeys;\n        var maxRatioObj = arrOfKeysTmp.reduce((prev, current) => (prev.ratio > current.ratio) ? prev : current);  // get the object with maximun ratio\n        var maxRatioIndex = arrOfKeys.findIndex(o => o.ratio === maxRatioObj.ratio);     // find the object index \n        let potentialId = maxRatioObj.k;            // potential key to be id\n        let total = 0;\n        var arrOfKeysTmpCopy = arrOfKeysTmp;\n        var arrCon = [];\n        maxRatioObj.v.map((itemToSearch) => {\n            var totalObjConnection = 0;\n            arrOfKeysTmpCopy.map((searchInto) => {\n                if (searchInto.k !== potentialId) {                      // sreach in all other keys beside the potential\n                    var count = this.countAppearence(itemToSearch, searchInto.v);\n                    if (count !== 0) {\n                        arrCon.push(searchInto.k)    // build array of connection types, tmp\n\n                    }\n                    totalObjConnection += count;\n                    total += count;\n                }\n            })\n\n            if (totalObjConnection === 0) {\n                //console.log(itemToSearch,' has no connections')\n            }\n            else {\n                //console.log(itemToSearch, 'has ',totalObjConnection,' connections')\n            }\n        })\n        if (total > maxRatioObj.v.length) {\n            isId = true;\n            console.log(potentialId + ' is the key that found uniqe')\n        }\n        arrConnections = this.getConnections(arrCon);\n        this.setState({\n            connectionsAll: arrConnections\n        })\n        return potentialId\n    }\n\n    countAppearence = (item, arr) => {\n        var count = arr.reduce(function (n, val) {\n            return n + (val === item);\n        }, 0);\n        return count\n    }\n\n    getConnections = (arr) => {\n        var arrConnectionType2 = [];\n        var tmpArrConnectionType2 = Array.from(new Set(arr));           // remove duplicate connections\n        for (let i = 0; i < tmpArrConnectionType2.length; i++) {                                   // create array of key value pair\n            //let count= this.countAppearence(tmpArrConnectionType2[i],arr)\n            let obj = {\n                name: tmpArrConnectionType2[i],\n                conAmount: 0,\n                isChecked: true\n            }\n            arrConnectionType2.push(obj)\n        }\n        console.log(arrConnectionType2);\n        return arrConnectionType2;\n    }\n\n    getNodes = (arr, id) => {\n        var nodesToAdd = [];\n        for (let item in arr) {\n            let newNode = arr[item];                        //create new node\n            newNode.id = arr[item][id];\n            newNode.nodeImage = '';\n            for (let key in arr[item]) {                // look for an image URL in the object\n                if (typeof arr[item][key] === 'object') {\n                    for (let k in arr[item][key]) {\n                        var isImageString = isImage(arr[item][key][k]);\n                        if (isImageString) {\n                            newNode.nodeImage = arr[item][key][k]\n                            break\n                        }\n                    }\n                }\n                else if (typeof arr[item][key] === 'string') {\n                    var isImageString = isImage(arr[item][key]);\n                    if (isImageString) {\n                        newNode.nodeImage = arr[item][key]\n                        break\n                    }\n                }\n                else {\n                    console.log(typeof arr[item][key])\n                    break\n                }\n            }\n            nodesToAdd.push(newNode);\n        }\n        finalJsonNetwork.nodes = nodesToAdd;\n        console.log(finalJsonNetwork.nodes);\n        this.setState({ finalJson: finalJsonNetwork }, () => { this.getLinks(rawData, id, arrConnections) })\n\n    }\n\n    getLinks = (arr, id, arrConnections) => {\n        console.log('inside get links')\n        console.log(this.state.finalJson)\n        var linksToAdd = [];\n        var tmpArr = arr;                      // search links in the original array, every loop we dismiss the current\n\n        for (let item in tmpArr) {\n            var searchedItem = tmpArr[item][id];\n            let itemToAddBack = tmpArr[item];\n            var withoutCorrent = tmpArr;\n            withoutCorrent.splice(item, 1);          // dismiss the current\n            for (let i in withoutCorrent) {\n                for (let key in withoutCorrent[i]) {\n                    if (key !== id && key !== 'id') {                   // search all keys bedise 'id', beacuse it key we added\n                        if (typeof withoutCorrent[i][key] === 'object') {\n                            for (let j = 0; j < withoutCorrent[i][key].length; j++) {\n                                if (searchedItem === withoutCorrent[i][key][j]) {\n                                    let newLink = { target: withoutCorrent[i][id], source: searchedItem, connectionType: key }\n                                    linksToAdd.push(newLink)                //create new link                                 \n                                }\n                            }\n                        }\n                        else {\n                            if (searchedItem === withoutCorrent[i][key]) {\n                                let newLink = { source: withoutCorrent[i][id], target: searchedItem, connectionType: key }\n                                linksToAdd.push(newLink);\n                            }\n                        }\n                    }\n                }\n            }\n            withoutCorrent.splice(item, 0, itemToAddBack)         // return back the current\n            tmpArr = withoutCorrent;\n        }\n\n\n        //  remove duplicate links\n        var linksTmp = linksToAdd.filter((ele, ind) => ind === linksToAdd.findIndex(elem => elem.source === ele.source && elem.target === ele.target))\n\n        //  remove nodes without links\n        var originalArray2 = this.state.finalJson.nodes;\n        var nodesWithLinks = [];\n        var nodesWithoutLinks = [];\n        var cnt = 0;\n        var cntWithout = 0;\n        var originalArray = Array.from(new Set(originalArray2));\n        console.log(originalArray)\n        for (let arr in originalArray) {\n            var hasLink = false;\n            for (let filter in linksTmp) {\n                if (originalArray[arr].id === linksTmp[filter].target || originalArray[arr].id === linksTmp[filter].source) {\n                    hasLink = true;\n                }\n            }\n            if (hasLink) {\n                cnt++;\n                nodesWithLinks.push(originalArray[arr]);\n\n            }\n\n            else {\n                cntWithout++;\n                nodesWithoutLinks.push(originalArray[arr])\n\n            }\n        }\n\n        // remove duplicates\n        nodesWithLinks = nodesWithLinks.filter((ele, ind) => ind === nodesWithLinks.findIndex(elem => elem.id === ele.id && elem.id === ele.id))\n        nodesWithoutLinks = nodesWithoutLinks.filter((ele, ind) => ind === nodesWithoutLinks.findIndex(elem => elem.id === ele.id && elem.id === ele.id))\n        originalArray = originalArray.filter((ele, ind) => ind === originalArray.findIndex(elem => elem.id === ele.id && elem.id === ele.id))\n\n        console.log('with', cnt)\n        console.log('without', cntWithout)\n        console.log('original ', originalArray)\n        console.log('nodesWithLinks ', nodesWithLinks)\n        console.log('nodesWithoutLinks ', nodesWithoutLinks)\n\n\n        //count total connection type amount\n        linksTmp.map(i => {\n            let pos = arrConnections.map(function (e) { return e.name; }).indexOf(i.connectionType);\n            let count = arrConnections[pos].conAmount;\n            count++;\n            arrConnections[pos].conAmount = count;\n        })\n\n        arrConnections.sort(function (a, b) {           //    sort connection types by amount of appearence\n            return b.conAmount - a.conAmount;\n        });\n\n\n        finalJsonNetwork.links = linksTmp;\n        finalJsonNetwork.nodes = nodesWithLinks;\n        console.log(finalJsonNetwork)\n        console.log(arrConnections)\n        //this.forceUpdate();\n        this.setState({\n            finalJson: finalJsonNetwork,\n            connectionsAll: arrConnections,\n            allNodes: originalArray\n        })\n\n    }\n\n    goToGame = () => {\n        console.log(\"inside game\")\n        var dataToPass = this.state.finalJson;\n        //var nodesData = this.state.allNodes;\n        this.props.history.push({\n            pathname: '/game',\n            state: {\n                finalJson: dataToPass,\n \n            }\n        });\n\n    }\n\n    render() {\n        if (localStorage.getItem('jsonRowData')) {\n            rawData = JSON.parse(localStorage.getItem('jsonRowData'));\n        }\n        else {\n            rawData = this.props.location.state.jsonDetails.rawData;\n        }\n        if (localStorage.getItem('jsonDetails')) {\n            dataFromLocal = JSON.parse(localStorage.getItem('jsonDetails'));\n        }\n        else {\n            dataFromLocal = this.props.location.state.jsonDetails.rawData\n        }\n        //rawData= this.props.location.state.jsonDetails.rawData;\n\n        console.log('render', this.state.finalJson)\n\n        return (\n            <div>\n                <Container>\n                    <Row><br /></Row>\n                    <Row><br /></Row>\n                    <Row>\n                        <Col xs={12}>\n                            <FoundDataInFile removeAll={this.RemoveAllConnections} passedFunction={this.RemoveConnection} data={arrKeysAndRadio} details={dataFromLocal} connections={arrConnections} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button style={{ padding: '1.175rem 0.75rem', fontSize: '1.1rem', marginBottom: '2rem' }} variant=\"btn btn-info \" onClick={() => this.postJsonToDB(finalJsonNetwork)}>Save network to DB</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"overflow-hidden\">\n\n                        <ForceGraph3D\n                            graphData={this.state.finalJson}\n                            nodeLabel=\"id\"\n                            linkLabel=\"connectionType\"\n                            nodeAutoColorBy=\"id\"\n                            nodeRelSize={8}\n                            linkThreeObjectExtend={true}\n                            showNavInfo={false}\n                            backgroundColor=\"rgb(164, 184, 204)\"\n                            linkWidth={2}\n                            refresh={true}\n                        />\n\n                    </Row>\n                   {/*<Row>\n                        <Col>\n                            <Button style={{ padding: '1.175rem 0.75rem', fontSize: '1.1rem', marginBottom: '2rem' }} variant=\"btn btn-info\" onClick={this.goToGame}>Start \"play\"</Button>\n                        </Col>\n                    </Row>\n                    * */} \n                </Container>\n            </div >\n        )\n    }\n}\n\nexport default withRouter(Graph); "]},"metadata":{},"sourceType":"module"}