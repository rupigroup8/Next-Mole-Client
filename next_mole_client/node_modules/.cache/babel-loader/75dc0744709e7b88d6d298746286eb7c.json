{"ast":null,"code":"module.exports = InsertStack;\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\n\nfunction InsertStack() {\n  this.stack = [];\n  this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n  isEmpty: function isEmpty() {\n    return this.popIdx === 0;\n  },\n  push: function push(node, body) {\n    var item = this.stack[this.popIdx];\n\n    if (!item) {\n      // we are trying to avoid memory pressue: create new element\n      // only when absolutely necessary\n      this.stack[this.popIdx] = new InsertStackElement(node, body);\n    } else {\n      item.node = node;\n      item.body = body;\n    }\n\n    ++this.popIdx;\n  },\n  pop: function pop() {\n    if (this.popIdx > 0) {\n      return this.stack[--this.popIdx];\n    }\n  },\n  reset: function reset() {\n    this.popIdx = 0;\n  }\n};\n\nfunction InsertStackElement(node, body) {\n  this.node = node; // QuadTree node\n\n  this.body = body; // physical body which needs to be inserted to node\n}","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.quadtreebh/insertStack.js"],"names":["module","exports","InsertStack","stack","popIdx","prototype","isEmpty","push","node","body","item","InsertStackElement","pop","reset"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEA;;;;;;AAKA,SAASA,WAAT,GAAwB;AACpB,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,MAAL,GAAc,CAAd;AACH;;AAEDF,WAAW,CAACG,SAAZ,GAAwB;AACpBC,EAAAA,OAAO,EAAE,mBAAW;AAChB,WAAO,KAAKF,MAAL,KAAgB,CAAvB;AACH,GAHmB;AAIpBG,EAAAA,IAAI,EAAE,cAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACxB,QAAIC,IAAI,GAAG,KAAKP,KAAL,CAAW,KAAKC,MAAhB,CAAX;;AACA,QAAI,CAACM,IAAL,EAAW;AACP;AACA;AACA,WAAKP,KAAL,CAAW,KAAKC,MAAhB,IAA0B,IAAIO,kBAAJ,CAAuBH,IAAvB,EAA6BC,IAA7B,CAA1B;AACH,KAJD,MAIO;AACHC,MAAAA,IAAI,CAACF,IAAL,GAAYA,IAAZ;AACAE,MAAAA,IAAI,CAACD,IAAL,GAAYA,IAAZ;AACH;;AACD,MAAE,KAAKL,MAAP;AACH,GAfmB;AAgBpBQ,EAAAA,GAAG,EAAE,eAAY;AACb,QAAI,KAAKR,MAAL,GAAc,CAAlB,EAAqB;AACjB,aAAO,KAAKD,KAAL,CAAW,EAAE,KAAKC,MAAlB,CAAP;AACH;AACJ,GApBmB;AAqBpBS,EAAAA,KAAK,EAAE,iBAAY;AACf,SAAKT,MAAL,GAAc,CAAd;AACH;AAvBmB,CAAxB;;AA0BA,SAASO,kBAAT,CAA4BH,IAA5B,EAAkCC,IAAlC,EAAwC;AACpC,OAAKD,IAAL,GAAYA,IAAZ,CADoC,CAClB;;AAClB,OAAKC,IAAL,GAAYA,IAAZ,CAFoC,CAElB;AACrB","sourcesContent":["module.exports = InsertStack;\n\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressue: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n"]},"metadata":{},"sourceType":"script"}