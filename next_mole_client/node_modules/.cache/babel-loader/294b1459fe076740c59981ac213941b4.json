{"ast":null,"code":"module.exports = function (bodies, settings) {\n  var random = require('ngraph.random').random(42);\n\n  var boundingBox = {\n    x1: 0,\n    y1: 0,\n    z1: 0,\n    x2: 0,\n    y2: 0,\n    z2: 0\n  };\n  return {\n    box: boundingBox,\n    update: updateBoundingBox,\n    reset: function reset() {\n      boundingBox.x1 = boundingBox.y1 = 0;\n      boundingBox.x2 = boundingBox.y2 = 0;\n      boundingBox.z1 = boundingBox.z2 = 0;\n    },\n    getBestNewPosition: function getBestNewPosition(neighbors) {\n      var graphRect = boundingBox;\n      var baseX = 0,\n          baseY = 0,\n          baseZ = 0;\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          baseX += neighbors[i].pos.x;\n          baseY += neighbors[i].pos.y;\n          baseZ += neighbors[i].pos.z;\n        }\n\n        baseX /= neighbors.length;\n        baseY /= neighbors.length;\n        baseZ /= neighbors.length;\n      } else {\n        baseX = (graphRect.x1 + graphRect.x2) / 2;\n        baseY = (graphRect.y1 + graphRect.y2) / 2;\n        baseZ = (graphRect.z1 + graphRect.z2) / 2;\n      }\n\n      var springLength = settings.springLength;\n      return {\n        x: baseX + random.next(springLength) - springLength / 2,\n        y: baseY + random.next(springLength) - springLength / 2,\n        z: baseZ + random.next(springLength) - springLength / 2\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n\n    if (i === 0) {\n      return;\n    } // don't have to wory here.\n\n\n    var x1 = Number.MAX_VALUE,\n        y1 = Number.MAX_VALUE,\n        z1 = Number.MAX_VALUE,\n        x2 = Number.MIN_VALUE,\n        y2 = Number.MIN_VALUE,\n        z2 = Number.MIN_VALUE;\n\n    while (i--) {\n      // this is O(n), could it be done faster with quadtree?\n      // how about pinned nodes?\n      var body = bodies[i];\n\n      if (body.isPinned) {\n        body.pos.x = body.prevPos.x;\n        body.pos.y = body.prevPos.y;\n        body.pos.z = body.prevPos.z;\n      } else {\n        body.prevPos.x = body.pos.x;\n        body.prevPos.y = body.pos.y;\n        body.prevPos.z = body.pos.z;\n      }\n\n      if (body.pos.x < x1) {\n        x1 = body.pos.x;\n      }\n\n      if (body.pos.x > x2) {\n        x2 = body.pos.x;\n      }\n\n      if (body.pos.y < y1) {\n        y1 = body.pos.y;\n      }\n\n      if (body.pos.y > y2) {\n        y2 = body.pos.y;\n      }\n\n      if (body.pos.z < z1) {\n        z1 = body.pos.z;\n      }\n\n      if (body.pos.z > z2) {\n        z2 = body.pos.z;\n      }\n    }\n\n    boundingBox.x1 = x1;\n    boundingBox.x2 = x2;\n    boundingBox.y1 = y1;\n    boundingBox.y2 = y2;\n    boundingBox.z1 = z1;\n    boundingBox.z2 = z2;\n  }\n};","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.forcelayout3d/lib/bounds.js"],"names":["module","exports","bodies","settings","random","require","boundingBox","x1","y1","z1","x2","y2","z2","box","update","updateBoundingBox","reset","getBestNewPosition","neighbors","graphRect","baseX","baseY","baseZ","length","i","pos","x","y","z","springLength","next","Number","MAX_VALUE","MIN_VALUE","body","isPinned","prevPos"],"mappings":"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","sourcesContent":["module.exports = function (bodies, settings) {\n  var random = require('ngraph.random').random(42);\n  var boundingBox =  { x1: 0, y1: 0, z1: 0, x2: 0, y2: 0, z2: 0 };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset : function () {\n      boundingBox.x1 = boundingBox.y1 = 0;\n      boundingBox.x2 = boundingBox.y2 = 0;\n      boundingBox.z1 = boundingBox.z2 = 0;\n    },\n\n    getBestNewPosition: function (neighbors) {\n      var graphRect = boundingBox;\n\n      var baseX = 0, baseY = 0, baseZ = 0;\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          baseX += neighbors[i].pos.x;\n          baseY += neighbors[i].pos.y;\n          baseZ += neighbors[i].pos.z;\n        }\n\n        baseX /= neighbors.length;\n        baseY /= neighbors.length;\n        baseZ /= neighbors.length;\n      } else {\n        baseX = (graphRect.x1 + graphRect.x2) / 2;\n        baseY = (graphRect.y1 + graphRect.y2) / 2;\n        baseZ = (graphRect.z1 + graphRect.z2) / 2;\n      }\n\n      var springLength = settings.springLength;\n      return {\n        x: baseX + random.next(springLength) - springLength / 2,\n        y: baseY + random.next(springLength) - springLength / 2,\n        z: baseZ + random.next(springLength) - springLength / 2\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) { return; } // don't have to wory here.\n\n    var x1 = Number.MAX_VALUE,\n        y1 = Number.MAX_VALUE,\n        z1 = Number.MAX_VALUE,\n        x2 = Number.MIN_VALUE,\n        y2 = Number.MIN_VALUE,\n        z2 = Number.MIN_VALUE;\n\n    while(i--) {\n      // this is O(n), could it be done faster with quadtree?\n      // how about pinned nodes?\n      var body = bodies[i];\n      if (body.isPinned) {\n        body.pos.x = body.prevPos.x;\n        body.pos.y = body.prevPos.y;\n        body.pos.z = body.prevPos.z;\n      } else {\n        body.prevPos.x = body.pos.x;\n        body.prevPos.y = body.pos.y;\n        body.prevPos.z = body.pos.z;\n      }\n      if (body.pos.x < x1) {\n        x1 = body.pos.x;\n      }\n      if (body.pos.x > x2) {\n        x2 = body.pos.x;\n      }\n      if (body.pos.y < y1) {\n        y1 = body.pos.y;\n      }\n      if (body.pos.y > y2) {\n        y2 = body.pos.y;\n      }\n      if (body.pos.z < z1) {\n        z1 = body.pos.z;\n      }\n      if (body.pos.z > z2) {\n        z2 = body.pos.z;\n      }\n    }\n\n    boundingBox.x1 = x1;\n    boundingBox.x2 = x2;\n    boundingBox.y1 = y1;\n    boundingBox.y2 = y2;\n    boundingBox.z1 = z1;\n    boundingBox.z2 = z2;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}