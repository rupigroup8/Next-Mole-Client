{"ast":null,"code":"/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\nvar GamepadButton = require('../../lib/GamepadButton'),\n    GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\n\nvar JOYSTICK_EPS = 0.2;\nvar Joystick = {\n  MOVEMENT: 1,\n  ROTATION: 2\n};\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n  /*******************************************************************\n   * Statics\n   */\n  GamepadButton: GamepadButton,\n\n  /*******************************************************************\n   * Schema\n   */\n  schema: {\n    // Controller 0-3\n    controller: {\n      default: 0,\n      oneOf: [0, 1, 2, 3]\n    },\n    // Enable/disable features\n    enabled: {\n      default: true\n    },\n    // Debugging\n    debug: {\n      default: false\n    },\n    // Heading element for rotation\n    camera: {\n      default: '[camera]',\n      type: 'selector'\n    },\n    // Rotation sensitivity\n    rotationSensitivity: {\n      default: 2.0\n    }\n  },\n\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function init() {\n    var sceneEl = this.el.sceneEl;\n    this.system = sceneEl.systems['tracked-controls-webxr'] || {\n      controllers: []\n    };\n    this.prevTime = window.performance.now(); // Button state\n\n    this.buttons = {}; // Rotation\n\n    var rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = THREE.Math.degToRad(rotation.x);\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = THREE.Math.degToRad(rotation.y);\n    this.yaw.add(this.pitch);\n    this._lookVector = new THREE.Vector2();\n    this._moveVector = new THREE.Vector2();\n    this._dpadVector = new THREE.Vector2();\n    sceneEl.addBehavior(this);\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function update() {\n    this.tick();\n  },\n\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function tick(t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function remove() {},\n\n  /*******************************************************************\n   * Movement\n   */\n  isVelocityActive: function isVelocityActive() {\n    if (!this.data.enabled || !this.isConnected()) return false;\n    var dpad = this._dpadVector;\n    var joystick = this._moveVector;\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n    var inputX = dpad.x || joystick.x;\n    var inputY = dpad.y || joystick.y;\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n  getVelocityDelta: function getVelocityDelta() {\n    var dpad = this._dpadVector;\n    var joystick = this._moveVector;\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n    var inputX = dpad.x || joystick.x;\n    var inputY = dpad.y || joystick.y;\n    var dVelocity = new THREE.Vector3();\n\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n\n    return dVelocity;\n  },\n\n  /*******************************************************************\n   * Rotation\n   */\n  isRotationActive: function isRotationActive() {\n    if (!this.data.enabled || !this.isConnected()) return false;\n    var joystick = this._lookVector;\n    this.getJoystick(Joystick.ROTATION, joystick);\n    return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;\n  },\n  updateRotation: function updateRotation(dt) {\n    if (!this.isRotationActive()) return;\n    var data = this.data;\n    var yaw = this.yaw;\n    var pitch = this.pitch;\n    var lookControls = data.camera.components['look-controls'];\n    var hasLookControls = lookControls && lookControls.pitchObject && lookControls.yawObject; // Sync with look-controls pitch/yaw if available.\n\n    if (hasLookControls) {\n      pitch.rotation.copy(lookControls.pitchObject.rotation);\n      yaw.rotation.copy(lookControls.yawObject.rotation);\n    }\n\n    var lookVector = this._lookVector;\n    this.getJoystick(Joystick.ROTATION, lookVector);\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    data.camera.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0); // Sync with look-controls pitch/yaw if available.\n\n    if (hasLookControls) {\n      lookControls.pitchObject.rotation.copy(pitch.rotation);\n      lookControls.yawObject.rotation.copy(yaw.rotation);\n    }\n  },\n\n  /*******************************************************************\n   * Button events\n   */\n  updateButtonState: function updateButtonState() {\n    var gamepad = this.getGamepad();\n\n    if (this.data.enabled && gamepad) {\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n  emit: function emit(event) {\n    // Emit original event.\n    this.el.emit(event.type, event); // Emit convenience event, identifying button index.\n\n    this.el.emit(event.type + ':' + event.index, new GamepadButtonEvent(event.type, event.index, event));\n  },\n\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @return {Gamepad}\n   */\n  getGamepad: function getGamepad() {\n    var stdGamepad = navigator.getGamepads && navigator.getGamepads()[this.data.controller],\n        xrController = this.system.controllers[this.data.controller],\n        xrGamepad = xrController && xrController.gamepad,\n        proxyControls = this.el.sceneEl.components['proxy-controls'],\n        proxyGamepad = proxyControls && proxyControls.isConnected() && proxyControls.getGamepad(this.data.controller);\n    return proxyGamepad || xrGamepad || stdGamepad;\n  },\n\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function getButton(index) {\n    return this.getGamepad().buttons[index];\n  },\n\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function getAxis(index) {\n    return this.getGamepad().axes[index];\n  },\n\n  /**\n   * Returns the state of the specified joystick as a THREE.Vector2.\n   * @param  {Joystick} role\n   * @param  {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function getJoystick(index, target) {\n    var gamepad = this.getGamepad();\n\n    if (gamepad.mapping === 'xr-standard') {\n      // See: https://github.com/donmccurdy/aframe-extras/issues/307\n      switch (index) {\n        case Joystick.MOVEMENT:\n          return target.set(gamepad.axes[2], gamepad.axes[3]);\n\n        case Joystick.ROTATION:\n          return target.set(gamepad.axes[0], gamepad.axes[1]);\n      }\n    } else {\n      switch (index) {\n        case Joystick.MOVEMENT:\n          return target.set(gamepad.axes[0], gamepad.axes[1]);\n\n        case Joystick.ROTATION:\n          return target.set(gamepad.axes[2], gamepad.axes[3]);\n      }\n    }\n\n    throw new Error('Unexpected joystick index \"%d\".', index);\n  },\n\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @param {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getDpad: function getDpad(target) {\n    var gamepad = this.getGamepad();\n\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return target.set(0, 0);\n    }\n\n    return target.set((gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0) + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0), (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0) + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0));\n  },\n\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function isConnected() {\n    var gamepad = this.getGamepad();\n    return !!(gamepad && gamepad.connected);\n  },\n\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function getID() {\n    return this.getGamepad().id;\n  }\n});","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/aframe-extras/src/controls/gamepad-controls.js"],"names":["GamepadButton","require","GamepadButtonEvent","JOYSTICK_EPS","Joystick","MOVEMENT","ROTATION","module","exports","AFRAME","registerComponent","schema","controller","default","oneOf","enabled","debug","camera","type","rotationSensitivity","init","sceneEl","el","system","systems","controllers","prevTime","window","performance","now","buttons","rotation","object3D","pitch","THREE","Object3D","x","Math","degToRad","yaw","position","y","add","_lookVector","Vector2","_moveVector","_dpadVector","addBehavior","update","tick","t","dt","updateButtonState","updateRotation","remove","isVelocityActive","data","isConnected","dpad","joystick","getDpad","getJoystick","inputX","inputY","abs","getVelocityDelta","dVelocity","Vector3","z","isRotationActive","lookControls","components","hasLookControls","pitchObject","yawObject","copy","lookVector","multiplyScalar","max","PI","min","set","gamepad","getGamepad","i","length","pressed","emit","Object","keys","event","index","stdGamepad","navigator","getGamepads","xrController","xrGamepad","proxyControls","proxyGamepad","getButton","getAxis","axes","target","mapping","Error","DPAD_RIGHT","DPAD_LEFT","DPAD_UP","DPAD_DOWN","connected","getID","id"],"mappings":"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","sourcesContent":["/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\n\nconst GamepadButton = require('../../lib/GamepadButton'),\n    GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\n\nconst JOYSTICK_EPS = 0.2;\n\nconst Joystick = {\n  MOVEMENT: 1,\n  ROTATION: 2\n};\n\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n\n  /*******************************************************************\n   * Statics\n   */\n\n  GamepadButton: GamepadButton,\n\n  /*******************************************************************\n   * Schema\n   */\n\n  schema: {\n    // Controller 0-3\n    controller:        { default: 0, oneOf: [0, 1, 2, 3] },\n\n    // Enable/disable features\n    enabled:           { default: true },\n\n    // Debugging\n    debug:             { default: false },\n\n    // Heading element for rotation\n    camera:          { default: '[camera]', type: 'selector' },\n\n    // Rotation sensitivity\n    rotationSensitivity:  { default: 2.0 },\n  },\n\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    const sceneEl = this.el.sceneEl;\n\n    this.system = sceneEl.systems['tracked-controls-webxr'] || {controllers: []};\n\n    this.prevTime = window.performance.now();\n\n    // Button state\n    this.buttons = {};\n\n    // Rotation\n    const rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = THREE.Math.degToRad(rotation.x);\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = THREE.Math.degToRad(rotation.y);\n    this.yaw.add(this.pitch);\n\n    this._lookVector = new THREE.Vector2();\n    this._moveVector = new THREE.Vector2();\n    this._dpadVector = new THREE.Vector2();\n\n    sceneEl.addBehavior(this);\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function () { this.tick(); },\n\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function (t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /*******************************************************************\n   * Movement\n   */\n\n  isVelocityActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n\n  getVelocityDelta: function () {\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    const dVelocity = new THREE.Vector3();\n\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n\n    return dVelocity;\n  },\n\n  /*******************************************************************\n   * Rotation\n   */\n\n  isRotationActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const joystick = this._lookVector;\n\n    this.getJoystick(Joystick.ROTATION, joystick);\n\n    return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;\n  },\n\n  updateRotation: function (dt) {\n    if (!this.isRotationActive()) return;\n\n    const data = this.data;\n    const yaw = this.yaw;\n    const pitch = this.pitch;\n    const lookControls = data.camera.components['look-controls'];\n    const hasLookControls = lookControls && lookControls.pitchObject && lookControls.yawObject;\n\n    // Sync with look-controls pitch/yaw if available.\n    if (hasLookControls) {\n      pitch.rotation.copy(lookControls.pitchObject.rotation);\n      yaw.rotation.copy(lookControls.yawObject.rotation);\n    }\n\n    const lookVector = this._lookVector;\n\n    this.getJoystick(Joystick.ROTATION, lookVector);\n\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(- Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    data.camera.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0);\n\n    // Sync with look-controls pitch/yaw if available.\n    if (hasLookControls) {\n      lookControls.pitchObject.rotation.copy(pitch.rotation);\n      lookControls.yawObject.rotation.copy(yaw.rotation);\n    }\n  },\n\n  /*******************************************************************\n   * Button events\n   */\n\n  updateButtonState: function () {\n    const gamepad = this.getGamepad();\n    if (this.data.enabled && gamepad) {\n\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n\n  emit: function (event) {\n    // Emit original event.\n    this.el.emit(event.type, event);\n\n    // Emit convenience event, identifying button index.\n    this.el.emit(\n      event.type + ':' + event.index,\n      new GamepadButtonEvent(event.type, event.index, event)\n    );\n  },\n\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @return {Gamepad}\n   */\n  getGamepad: function () {\n    const stdGamepad = navigator.getGamepads\n          && navigator.getGamepads()[this.data.controller],\n        xrController = this.system.controllers[this.data.controller],\n        xrGamepad = xrController && xrController.gamepad,\n        proxyControls = this.el.sceneEl.components['proxy-controls'],\n        proxyGamepad = proxyControls && proxyControls.isConnected()\n          && proxyControls.getGamepad(this.data.controller);\n    return proxyGamepad || xrGamepad || stdGamepad;\n  },\n\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function (index) {\n    return this.getGamepad().buttons[index];\n  },\n\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function (index) {\n    return this.getGamepad().axes[index];\n  },\n\n  /**\n   * Returns the state of the specified joystick as a THREE.Vector2.\n   * @param  {Joystick} role\n   * @param  {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function (index, target) {\n    const gamepad = this.getGamepad();\n    if (gamepad.mapping === 'xr-standard') {\n      // See: https://github.com/donmccurdy/aframe-extras/issues/307\n      switch (index) {\n        case Joystick.MOVEMENT: return target.set(gamepad.axes[2], gamepad.axes[3]);\n        case Joystick.ROTATION: return target.set(gamepad.axes[0], gamepad.axes[1]);\n      }\n    } else {\n      switch (index) {\n        case Joystick.MOVEMENT: return target.set(gamepad.axes[0], gamepad.axes[1]);\n        case Joystick.ROTATION: return target.set(gamepad.axes[2], gamepad.axes[3]);\n      }\n    }\n    throw new Error('Unexpected joystick index \"%d\".', index);\n  },\n\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @param {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getDpad: function (target) {\n    const gamepad = this.getGamepad();\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return target.set(0, 0);\n    }\n    return target.set(\n      (gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0),\n      (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0)\n    );\n  },\n\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function () {\n    const gamepad = this.getGamepad();\n    return !!(gamepad && gamepad.connected);\n  },\n\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function () {\n    return this.getGamepad().id;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}