{"ast":null,"code":"module.exports = random; // TODO: Deprecate?\n\nmodule.exports.random = random, module.exports.randomIterator = randomIterator;\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\n\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : +new Date();\n  return new Generator(seed);\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\n\n\nGenerator.prototype.next = next;\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\n\nGenerator.prototype.nextDouble = nextDouble;\n/**\n * Returns a random real number uniformly in [0, 1)\n */\n\nGenerator.prototype.uniform = nextDouble;\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r) / r);\n}\n\nfunction nextDouble() {\n  var seed = this.seed; // Robert Jenkins' 32 bit integer hash function.\n\n  seed = seed + 0x7ed55d16 + (seed << 12) & 0xffffffff;\n  seed = (seed ^ 0xc761c23c ^ seed >>> 19) & 0xffffffff;\n  seed = seed + 0x165667b1 + (seed << 5) & 0xffffffff;\n  seed = (seed + 0xd3a2646c ^ seed << 9) & 0xffffffff;\n  seed = seed + 0xfd7046c5 + (seed << 3) & 0xffffffff;\n  seed = (seed ^ 0xb55a4f09 ^ seed >>> 16) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\n\n\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.random/index.js"],"names":["module","exports","random","randomIterator","inputSeed","seed","Date","Generator","prototype","next","nextDouble","uniform","gaussian","r","x","y","Math","sqrt","log","maxValue","floor","array","customRandom","localRandom","Error","forEach","shuffle","i","j","t","length","callback"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB,C,CAEA;;AACAF,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBA,MAAxB,EACAF,MAAM,CAACC,OAAP,CAAeE,cAAf,GAAgCA,cADhC;AAGA;;;;;AAIA,SAASD,MAAT,CAAgBE,SAAhB,EAA2B;AACzB,MAAIC,IAAI,GAAG,OAAOD,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA6C,CAAC,IAAIE,IAAJ,EAAzD;AACA,SAAO,IAAIC,SAAJ,CAAcF,IAAd,CAAP;AACD;;AAED,SAASE,SAAT,CAAmBF,IAAnB,EAAyB;AACvB,OAAKA,IAAL,GAAYA,IAAZ;AACD;AAED;;;;;;;AAKAE,SAAS,CAACC,SAAV,CAAoBC,IAApB,GAA2BA,IAA3B;AAEA;;;;;AAIAF,SAAS,CAACC,SAAV,CAAoBE,UAApB,GAAiCA,UAAjC;AAEA;;;;AAGAH,SAAS,CAACC,SAAV,CAAoBG,OAApB,GAA8BD,UAA9B;AAEAH,SAAS,CAACC,SAAV,CAAoBI,QAApB,GAA+BA,QAA/B;;AAEA,SAASA,QAAT,GAAoB;AAClB;AACA;AACA,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,KAAG;AACDD,IAAAA,CAAC,GAAG,KAAKJ,UAAL,KAAoB,CAApB,GAAwB,CAA5B;AACAK,IAAAA,CAAC,GAAG,KAAKL,UAAL,KAAoB,CAApB,GAAwB,CAA5B;AACAG,IAAAA,CAAC,GAAGC,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAhB;AACD,GAJD,QAISF,CAAC,IAAI,CAAL,IAAUA,CAAC,KAAK,CAJzB;;AAMA,SAAOC,CAAC,GAAGE,IAAI,CAACC,IAAL,CAAU,CAAC,CAAD,GAAKD,IAAI,CAACE,GAAL,CAASL,CAAT,CAAL,GAAiBA,CAA3B,CAAX;AACD;;AAED,SAASH,UAAT,GAAsB;AACpB,MAAIL,IAAI,GAAG,KAAKA,IAAhB,CADoB,CAEpB;;AACAA,EAAAA,IAAI,GAAKA,IAAI,GAAG,UAAR,IAAuBA,IAAI,IAAI,EAA/B,CAAD,GAAuC,UAA9C;AACAA,EAAAA,IAAI,GAAG,CAAEA,IAAI,GAAG,UAAR,GAAuBA,IAAI,KAAK,EAAjC,IAAwC,UAA/C;AACAA,EAAAA,IAAI,GAAKA,IAAI,GAAG,UAAR,IAAuBA,IAAI,IAAI,CAA/B,CAAD,GAAsC,UAA7C;AACAA,EAAAA,IAAI,GAAG,CAAEA,IAAI,GAAG,UAAR,GAAuBA,IAAI,IAAI,CAAhC,IAAsC,UAA7C;AACAA,EAAAA,IAAI,GAAKA,IAAI,GAAG,UAAR,IAAuBA,IAAI,IAAI,CAA/B,CAAD,GAAsC,UAA7C;AACAA,EAAAA,IAAI,GAAG,CAAEA,IAAI,GAAG,UAAR,GAAuBA,IAAI,KAAK,EAAjC,IAAwC,UAA/C;AACA,OAAKA,IAAL,GAAYA,IAAZ;AACA,SAAO,CAACA,IAAI,GAAG,SAAR,IAAqB,UAA5B;AACD;;AAED,SAASI,IAAT,CAAcU,QAAd,EAAwB;AACtB,SAAOH,IAAI,CAACI,KAAL,CAAW,KAAKV,UAAL,KAAoBS,QAA/B,CAAP;AACD;AAED;;;;;;AAIA,SAAShB,cAAT,CAAwBkB,KAAxB,EAA+BC,YAA/B,EAA6C;AAC3C,MAAIC,WAAW,GAAGD,YAAY,IAAIpB,MAAM,EAAxC;;AACA,MAAI,OAAOqB,WAAW,CAACd,IAAnB,KAA4B,UAAhC,EAA4C;AAC1C,UAAM,IAAIe,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,SAAO;AACLC,IAAAA,OAAO,EAAEA,OADJ;;AAGL;;;AAGAC,IAAAA,OAAO,EAAEA;AANJ,GAAP;;AASA,WAASA,OAAT,GAAmB;AACjB,QAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,SAAKF,CAAC,GAAGN,KAAK,CAACS,MAAN,GAAe,CAAxB,EAA2BH,CAAC,GAAG,CAA/B,EAAkC,EAAEA,CAApC,EAAuC;AACrCC,MAAAA,CAAC,GAAGL,WAAW,CAACd,IAAZ,CAAiBkB,CAAC,GAAG,CAArB,CAAJ,CADqC,CACR;;AAC7BE,MAAAA,CAAC,GAAGR,KAAK,CAACO,CAAD,CAAT;AACAP,MAAAA,KAAK,CAACO,CAAD,CAAL,GAAWP,KAAK,CAACM,CAAD,CAAhB;AACAN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAWE,CAAX;AACD;;AAED,WAAOR,KAAP;AACD;;AAED,WAASI,OAAT,CAAiBM,QAAjB,EAA2B;AACzB,QAAIJ,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,SAAKF,CAAC,GAAGN,KAAK,CAACS,MAAN,GAAe,CAAxB,EAA2BH,CAAC,GAAG,CAA/B,EAAkC,EAAEA,CAApC,EAAuC;AACrCC,MAAAA,CAAC,GAAGL,WAAW,CAACd,IAAZ,CAAiBkB,CAAC,GAAG,CAArB,CAAJ,CADqC,CACR;;AAC7BE,MAAAA,CAAC,GAAGR,KAAK,CAACO,CAAD,CAAT;AACAP,MAAAA,KAAK,CAACO,CAAD,CAAL,GAAWP,KAAK,CAACM,CAAD,CAAhB;AACAN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAWE,CAAX;AAEAE,MAAAA,QAAQ,CAACF,CAAD,CAAR;AACD;;AAED,QAAIR,KAAK,CAACS,MAAV,EAAkB;AAChBC,MAAAA,QAAQ,CAACV,KAAK,CAAC,CAAD,CAAN,CAAR;AACD;AACF;AACF","sourcesContent":["module.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random,\nmodule.exports.randomIterator = randomIterator\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());\n  return new Generator(seed)\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number uniformly in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\n\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r)/r);\n}\n\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;\n  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;\n  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;\n  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;\n  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}