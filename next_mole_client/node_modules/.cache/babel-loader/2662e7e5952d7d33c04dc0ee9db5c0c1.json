{"ast":null,"code":"/**\n * Performs forces integration, using given time step. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0,\n      tx = 0,\n      dy = 0,\n      ty = 0,\n      i,\n      max = bodies.length;\n\n  if (max === 0) {\n    return 0;\n  }\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        v = Math.sqrt(vx * vx + vy * vy);\n\n    if (v > 1) {\n      // We normalize it so that we move within timeStep range. \n      // for the case when v <= 1 - we let velocity to fade out.\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n    body.pos.x += dx;\n    body.pos.y += dy;\n    tx += Math.abs(dx);\n    ty += Math.abs(dy);\n  }\n\n  return (tx * tx + ty * ty) / max;\n}","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js"],"names":["module","exports","integrate","bodies","timeStep","dx","tx","dy","ty","i","max","length","body","coeff","mass","velocity","x","force","y","vx","vy","v","Math","sqrt","pos","abs"],"mappings":"AAAA;;;;;;AAOAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AACnC,MAAIC,EAAE,GAAG,CAAT;AAAA,MAAYC,EAAE,GAAG,CAAjB;AAAA,MACIC,EAAE,GAAG,CADT;AAAA,MACYC,EAAE,GAAG,CADjB;AAAA,MAEIC,CAFJ;AAAA,MAGIC,GAAG,GAAGP,MAAM,CAACQ,MAHjB;;AAKA,MAAID,GAAG,KAAK,CAAZ,EAAe;AACb,WAAO,CAAP;AACD;;AAED,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,GAAhB,EAAqB,EAAED,CAAvB,EAA0B;AACxB,QAAIG,IAAI,GAAGT,MAAM,CAACM,CAAD,CAAjB;AAAA,QACII,KAAK,GAAGT,QAAQ,GAAGQ,IAAI,CAACE,IAD5B;AAGAF,IAAAA,IAAI,CAACG,QAAL,CAAcC,CAAd,IAAmBH,KAAK,GAAGD,IAAI,CAACK,KAAL,CAAWD,CAAtC;AACAJ,IAAAA,IAAI,CAACG,QAAL,CAAcG,CAAd,IAAmBL,KAAK,GAAGD,IAAI,CAACK,KAAL,CAAWC,CAAtC;AACA,QAAIC,EAAE,GAAGP,IAAI,CAACG,QAAL,CAAcC,CAAvB;AAAA,QACII,EAAE,GAAGR,IAAI,CAACG,QAAL,CAAcG,CADvB;AAAA,QAEIG,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAFR;;AAIA,QAAIC,CAAC,GAAG,CAAR,EAAW;AACT;AACA;AACAT,MAAAA,IAAI,CAACG,QAAL,CAAcC,CAAd,GAAkBG,EAAE,GAAGE,CAAvB;AACAT,MAAAA,IAAI,CAACG,QAAL,CAAcG,CAAd,GAAkBE,EAAE,GAAGC,CAAvB;AACD;;AAEDhB,IAAAA,EAAE,GAAGD,QAAQ,GAAGQ,IAAI,CAACG,QAAL,CAAcC,CAA9B;AACAT,IAAAA,EAAE,GAAGH,QAAQ,GAAGQ,IAAI,CAACG,QAAL,CAAcG,CAA9B;AAEAN,IAAAA,IAAI,CAACY,GAAL,CAASR,CAAT,IAAcX,EAAd;AACAO,IAAAA,IAAI,CAACY,GAAL,CAASN,CAAT,IAAcX,EAAd;AAEAD,IAAAA,EAAE,IAAIgB,IAAI,CAACG,GAAL,CAASpB,EAAT,CAAN;AAAoBG,IAAAA,EAAE,IAAIc,IAAI,CAACG,GAAL,CAASlB,EAAT,CAAN;AACrB;;AAED,SAAO,CAACD,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAhB,IAAoBE,GAA3B;AACD","sourcesContent":["/**\n * Performs forces integration, using given time step. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0, tx = 0,\n      dy = 0, ty = 0,\n      i,\n      max = bodies.length;\n\n  if (max === 0) {\n    return 0;\n  }\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        v = Math.sqrt(vx * vx + vy * vy);\n\n    if (v > 1) {\n      // We normalize it so that we move within timeStep range. \n      // for the case when v <= 1 - we let velocity to fade out.\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n\n    body.pos.x += dx;\n    body.pos.y += dy;\n\n    tx += Math.abs(dx); ty += Math.abs(dy);\n  }\n\n  return (tx * tx + ty * ty)/max;\n}\n"]},"metadata":{},"sourceType":"script"}