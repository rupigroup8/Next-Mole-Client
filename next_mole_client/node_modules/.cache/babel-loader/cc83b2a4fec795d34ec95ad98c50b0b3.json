{"ast":null,"code":"/**\n * Represents 3d spring force, which updates forces acting on two bodies, conntected\n * by a spring.\n *\n * @param {Object} options for the spring force\n * @param {Number=} options.springCoeff spring force coefficient.\n * @param {Number=} options.springLength desired length of a spring at rest.\n */\nmodule.exports = function (options) {\n  var merge = require('ngraph.merge');\n\n  var random = require('ngraph.random').random(42);\n\n  var expose = require('ngraph.expose');\n\n  options = merge(options, {\n    springCoeff: 0.0002,\n    springLength: 80\n  });\n  var api = {\n    /**\n     * Upsates forces acting on a spring\n     */\n    update: function update(spring) {\n      var body1 = spring.from,\n          body2 = spring.to,\n          length = spring.length < 0 ? options.springLength : spring.length,\n          dx = body2.pos.x - body1.pos.x,\n          dy = body2.pos.y - body1.pos.y,\n          dz = body2.pos.z - body1.pos.z,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n      if (r === 0) {\n        dx = (random.nextDouble() - 0.5) / 50;\n        dy = (random.nextDouble() - 0.5) / 50;\n        dz = (random.nextDouble() - 0.5) / 50;\n        r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n      }\n\n      var d = r - length;\n      var coeff = (!spring.coeff || spring.coeff < 0 ? options.springCoeff : spring.coeff) * d / r * spring.weight;\n      body1.force.x += coeff * dx;\n      body1.force.y += coeff * dy;\n      body1.force.z += coeff * dz;\n      body2.force.x -= coeff * dx;\n      body2.force.y -= coeff * dy;\n      body2.force.z -= coeff * dz;\n    }\n  };\n  expose(options, api, ['springCoeff', 'springLength']);\n  return api;\n};","map":{"version":3,"sources":["/Users/rgoren/Desktop/nextMoleAppClient/next_mole_client/node_modules/ngraph.forcelayout3d/lib/springForce.js"],"names":["module","exports","options","merge","require","random","expose","springCoeff","springLength","api","update","spring","body1","from","body2","to","length","dx","pos","x","dy","y","dz","z","r","Math","sqrt","nextDouble","d","coeff","weight","force"],"mappings":"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","sourcesContent":["/**\n * Represents 3d spring force, which updates forces acting on two bodies, conntected\n * by a spring.\n *\n * @param {Object} options for the spring force\n * @param {Number=} options.springCoeff spring force coefficient.\n * @param {Number=} options.springLength desired length of a spring at rest.\n */\nmodule.exports = function (options) {\n  var merge = require('ngraph.merge');\n  var random = require('ngraph.random').random(42);\n  var expose = require('ngraph.expose');\n\n  options = merge(options, {\n    springCoeff: 0.0002,\n    springLength: 80\n  });\n\n  var api = {\n    /**\n     * Upsates forces acting on a spring\n     */\n    update : function (spring) {\n      var body1 = spring.from,\n          body2 = spring.to,\n          length = spring.length < 0 ? options.springLength : spring.length,\n          dx = body2.pos.x - body1.pos.x,\n          dy = body2.pos.y - body1.pos.y,\n          dz = body2.pos.z - body1.pos.z,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n      if (r === 0) {\n          dx = (random.nextDouble() - 0.5) / 50;\n          dy = (random.nextDouble() - 0.5) / 50;\n          dz = (random.nextDouble() - 0.5) / 50;\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz);\n      }\n\n      var d = r - length;\n      var coeff = ((!spring.coeff || spring.coeff < 0) ? options.springCoeff : spring.coeff) * d / r * spring.weight;\n\n      body1.force.x += coeff * dx;\n      body1.force.y += coeff * dy;\n      body1.force.z += coeff * dz;\n\n      body2.force.x -= coeff * dx;\n      body2.force.y -= coeff * dy;\n      body2.force.z -= coeff * dz;\n    }\n  };\n\n  expose(options, api, ['springCoeff', 'springLength']);\n  return api;\n}\n"]},"metadata":{},"sourceType":"script"}